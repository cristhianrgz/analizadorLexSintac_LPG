/* The following code was generated by JFlex 1.4.3 on 12/12/19 1:00 a.m. */

package codigo;
import static codigo.token.*;

/* SECCION DE DECLARACIONES DE JFLEX */ 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/12/19 1:00 a.m. from the specification file
 * <tt>C:/Users/criss/OneDrive/Documentos/NetBeansProjects/AnalizadorLS_LPG/src/codigo/lexer.flex</tt>
 */
class lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\6\2\0\1\4\22\0\1\4\1\16\1\7\2\0"+
    "\1\13\1\15\1\0\1\22\1\23\1\12\1\10\1\4\1\11\1\32"+
    "\1\5\2\3\1\104\7\3\1\30\1\31\1\20\1\21\1\17\2\0"+
    "\1\73\1\63\1\64\1\47\1\70\1\102\1\50\1\1\1\100\2\1"+
    "\1\46\1\65\1\1\1\76\1\66\1\1\1\103\1\62\1\72\1\1"+
    "\1\67\4\1\1\24\1\0\1\25\1\0\1\61\1\0\1\42\1\53"+
    "\1\35\1\52\1\57\1\44\1\41\1\56\1\33\1\55\1\2\1\60"+
    "\1\43\1\34\1\36\1\37\1\2\1\40\1\51\1\45\1\54\1\77"+
    "\1\2\1\75\1\74\1\71\1\26\1\14\1\27\163\0\1\101\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\10\2\1\1\5\2\1\0\1\4\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\0\1\42\15\2\2\0\1\43\5\2\1\3\1\0"+
    "\4\2\1\44\11\2\1\45\14\0\4\2\1\46\1\2"+
    "\1\3\16\2\1\47\34\0\1\50\1\2\1\51\20\2"+
    "\41\0\1\52\5\0\1\2\1\53\1\2\1\54\1\2"+
    "\1\55\10\2\1\56\1\2\1\57\31\0\1\60\17\0"+
    "\3\2\1\61\2\2\1\62\5\2\1\63\3\0\1\64"+
    "\6\0\1\65\15\0\1\66\1\0\1\67\1\70\20\0"+
    "\1\71\1\2\1\72\2\2\1\73\3\2\1\74\10\0"+
    "\1\75\1\76\35\0\1\77\5\2\11\0\1\100\7\0"+
    "\1\101\6\0\1\102\13\0\1\103\1\104\1\105\4\0"+
    "\5\2\23\0\1\106\1\0\1\107\11\0\1\110\4\0"+
    "\1\111\1\0\5\2\1\112\1\113\1\114\1\115\2\0"+
    "\1\116\1\117\4\0\1\120\1\121\1\0\1\122\1\123"+
    "\22\0\5\2\4\0\1\124\4\0\1\125\5\0\1\126"+
    "\12\0\5\2\1\127\1\130\5\0\1\131\1\0\1\132"+
    "\16\0\5\2\2\0\1\133\5\0\1\134\1\135\1\0"+
    "\1\136\11\0\1\2\1\137\3\2\1\140\1\141\1\142"+
    "\1\0\1\143\14\0\1\144\3\2\2\0\1\145\1\0"+
    "\1\146\5\0\1\147\3\0\3\2\6\0\1\150\1\0"+
    "\1\151\2\0\3\2\11\0\3\2\1\0\1\152\1\0"+
    "\1\153\1\154\1\155\2\0\1\156\1\2\1\157\1\2"+
    "\1\160\1\161\3\0\2\2\1\162\1\0\1\163\1\164"+
    "\1\165\1\0\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[689];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\105\0\105"+
    "\0\u019e\0\u01e3\0\u0228\0\105\0\u026d\0\u02b2\0\u02f7\0\u033c"+
    "\0\u0381\0\u03c6\0\u040b\0\105\0\105\0\105\0\105\0\105"+
    "\0\u0450\0\105\0\105\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\105\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\u08e5\0\105\0\u092a\0\u096f"+
    "\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf"+
    "\0\u0e04\0\u0e49\0\u0e8e\0\u085b\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\212\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u1254\0\212\0\u1299\0\u12de\0\u1323\0\u1368"+
    "\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590"+
    "\0\u15d5\0\u161a\0\u165f\0\u16a4\0\212\0\u16e9\0\105\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6"+
    "\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce"+
    "\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6"+
    "\0\u223b\0\u2280\0\212\0\u22c5\0\212\0\u230a\0\u234f\0\u2394"+
    "\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc"+
    "\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c"+
    "\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34"+
    "\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084"+
    "\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\212\0\u3222\0\212"+
    "\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a"+
    "\0\u348f\0\u34d4\0\212\0\u3519\0\212\0\u355e\0\u35a3\0\u35e8"+
    "\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810"+
    "\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38"+
    "\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60"+
    "\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88"+
    "\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0"+
    "\0\u40f5\0\212\0\u413a\0\u417f\0\212\0\u41c4\0\u4209\0\u424e"+
    "\0\u4293\0\u42d8\0\212\0\u431d\0\u4362\0\u43a7\0\105\0\u43ec"+
    "\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545\0\105\0\u458a\0\u45cf"+
    "\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7"+
    "\0\u483c\0\u4881\0\u48c6\0\105\0\u490b\0\105\0\105\0\u4950"+
    "\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78"+
    "\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\212"+
    "\0\u4da0\0\212\0\u4de5\0\u4e2a\0\212\0\u4e6f\0\u4eb4\0\u4ef9"+
    "\0\212\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097\0\u50dc"+
    "\0\u5121\0\105\0\105\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a"+
    "\0\u52bf\0\u5304\0\u5349\0\u538e\0\u53d3\0\u5418\0\u545d\0\u54a2"+
    "\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb\0\u5640\0\u5685\0\u56ca"+
    "\0\u570f\0\u5754\0\u5799\0\u57de\0\u5823\0\u5868\0\u58ad\0\u58f2"+
    "\0\212\0\u5937\0\u597c\0\u59c1\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5"+
    "\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\105"+
    "\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\105"+
    "\0\u5ee0\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4\0\u6039\0\105\0\u607e"+
    "\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7\0\u621c\0\u6261\0\u62a6"+
    "\0\u62eb\0\u6330\0\105\0\105\0\105\0\u6375\0\u63ba\0\u63ff"+
    "\0\u6444\0\u6489\0\u64ce\0\u6513\0\u6558\0\u659d\0\u65e2\0\u6627"+
    "\0\u666c\0\u66b1\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u680a\0\u684f"+
    "\0\u6894\0\u68d9\0\u691e\0\u6963\0\u69a8\0\u69ed\0\u6a32\0\u6a77"+
    "\0\u6abc\0\105\0\u6b01\0\105\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15"+
    "\0\u6c5a\0\u6c9f\0\u6ce4\0\u6d29\0\u6d6e\0\105\0\u6db3\0\u6df8"+
    "\0\u6e3d\0\u6e82\0\105\0\u6ec7\0\u6f0c\0\u6f51\0\u6f96\0\u6fdb"+
    "\0\u7020\0\105\0\105\0\105\0\105\0\u7065\0\u70aa\0\105"+
    "\0\105\0\u70ef\0\u7134\0\u7179\0\u71be\0\105\0\u7203\0\u7248"+
    "\0\105\0\105\0\u728d\0\u72d2\0\u7317\0\u735c\0\u73a1\0\u73e6"+
    "\0\u742b\0\u7470\0\u74b5\0\u74fa\0\u753f\0\u7584\0\u75c9\0\u760e"+
    "\0\u7653\0\u7698\0\u76dd\0\u7722\0\u7767\0\u77ac\0\u77f1\0\u7836"+
    "\0\u787b\0\u78c0\0\u7905\0\u794a\0\u798f\0\105\0\u79d4\0\u7a19"+
    "\0\u7a5e\0\u7aa3\0\105\0\u7ae8\0\u7b2d\0\u7b72\0\u7bb7\0\u7bfc"+
    "\0\105\0\u7c41\0\u7c86\0\u7ccb\0\u7d10\0\u7d55\0\u7d9a\0\u7ddf"+
    "\0\u7e24\0\u7e69\0\u7eae\0\u7ef3\0\u7f38\0\u7f7d\0\u7fc2\0\u8007"+
    "\0\105\0\105\0\u804c\0\u8091\0\u80d6\0\u811b\0\u8160\0\105"+
    "\0\u81a5\0\105\0\u81ea\0\u822f\0\u8274\0\u82b9\0\u82fe\0\u8343"+
    "\0\u8388\0\u83cd\0\u8412\0\u8457\0\u849c\0\u84e1\0\u8526\0\u856b"+
    "\0\u85b0\0\u85f5\0\u863a\0\u867f\0\u86c4\0\u8709\0\u874e\0\105"+
    "\0\u8793\0\u87d8\0\u881d\0\u8862\0\u88a7\0\105\0\105\0\u88ec"+
    "\0\105\0\u8931\0\u8976\0\u89bb\0\u8a00\0\u8a45\0\u8a8a\0\u8acf"+
    "\0\u8b14\0\u8b59\0\u8b9e\0\212\0\u8be3\0\u8c28\0\u8c6d\0\105"+
    "\0\u8cb2\0\105\0\u8cf7\0\105\0\u8d3c\0\u8d81\0\u8dc6\0\u8e0b"+
    "\0\u8e50\0\u8e95\0\u8eda\0\u8f1f\0\u8f64\0\u8fa9\0\u8fee\0\u9033"+
    "\0\212\0\u9078\0\u90bd\0\u9102\0\u9147\0\u918c\0\105\0\u91d1"+
    "\0\105\0\u9216\0\u925b\0\u92a0\0\u92e5\0\u932a\0\105\0\u936f"+
    "\0\u93b4\0\u93f9\0\u943e\0\u9483\0\u94c8\0\u950d\0\u9552\0\u9597"+
    "\0\u95dc\0\u9621\0\u9666\0\105\0\u96ab\0\105\0\u96f0\0\u9735"+
    "\0\u977a\0\u97bf\0\u9804\0\u9849\0\u988e\0\u98d3\0\u9918\0\u995d"+
    "\0\u99a2\0\u99e7\0\u9a2c\0\u9a71\0\u9ab6\0\u9afb\0\u9b40\0\u9b85"+
    "\0\105\0\u9bca\0\105\0\105\0\u9c0f\0\u9c54\0\u9c99\0\105"+
    "\0\u9cde\0\212\0\u9d23\0\105\0\105\0\u9d68\0\u9dad\0\u9df2"+
    "\0\u9e37\0\u9e7c\0\105\0\u9ec1\0\105\0\212\0\212\0\u9f06"+
    "\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[689];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\2\3"+
    "\1\41\1\42\1\43\1\3\1\44\2\2\1\45\1\46"+
    "\1\47\2\3\1\50\1\51\1\3\10\2\1\3\2\2"+
    "\2\3\1\2\1\3\4\2\1\4\106\0\3\3\27\0"+
    "\46\3\1\0\3\3\3\0\1\4\26\0\1\52\51\0"+
    "\1\4\4\0\1\5\105\0\1\53\107\0\1\54\105\0"+
    "\1\55\105\0\1\56\106\0\1\57\105\0\1\60\110\0"+
    "\1\61\104\0\1\62\104\0\1\63\104\0\1\64\74\0"+
    "\1\65\114\0\1\66\64\0\3\3\27\0\1\3\1\67"+
    "\6\3\1\70\35\3\1\0\3\3\1\0\3\3\27\0"+
    "\21\3\1\71\24\3\1\0\3\3\1\0\3\3\27\0"+
    "\3\3\1\72\3\3\1\73\36\3\1\0\3\3\1\0"+
    "\3\3\27\0\5\3\1\74\12\3\1\75\25\3\1\0"+
    "\3\3\1\0\3\3\27\0\5\3\1\76\17\3\1\77"+
    "\20\3\1\0\3\3\1\0\3\3\27\0\2\3\1\100"+
    "\43\3\1\0\3\3\1\0\3\3\27\0\1\101\2\3"+
    "\1\102\42\3\1\0\3\3\1\0\3\3\27\0\1\103"+
    "\45\3\1\0\3\3\46\0\1\104\1\0\1\105\35\0"+
    "\3\3\27\0\1\106\45\3\1\0\3\3\1\0\3\3"+
    "\27\0\1\107\45\3\1\0\3\3\1\0\3\3\27\0"+
    "\3\3\1\110\42\3\1\0\3\3\1\0\3\3\27\0"+
    "\7\3\1\111\36\3\1\0\3\3\1\0\3\3\27\0"+
    "\1\3\1\112\23\3\1\113\20\3\1\0\3\3\3\0"+
    "\1\114\100\0\1\114\6\53\1\0\76\53\3\0\1\115"+
    "\100\0\1\115\1\0\3\3\27\0\1\116\45\3\1\0"+
    "\3\3\1\0\3\3\27\0\4\3\1\117\41\3\1\0"+
    "\3\3\1\0\3\3\27\0\10\3\1\120\35\3\1\0"+
    "\3\3\1\0\3\3\27\0\25\3\1\121\20\3\1\0"+
    "\3\3\1\0\3\3\27\0\17\3\1\122\26\3\1\0"+
    "\3\3\1\0\3\3\27\0\17\3\1\123\26\3\1\0"+
    "\3\3\1\0\3\3\27\0\12\3\1\124\33\3\1\0"+
    "\3\3\1\0\3\3\27\0\3\3\1\125\42\3\1\0"+
    "\3\3\1\0\3\3\27\0\7\3\1\126\36\3\1\0"+
    "\3\3\1\0\3\3\27\0\21\3\1\127\24\3\1\0"+
    "\3\3\1\0\3\3\27\0\24\3\1\130\21\3\1\0"+
    "\3\3\1\0\3\3\27\0\1\3\1\131\14\3\1\132"+
    "\1\133\26\3\1\0\3\3\1\0\3\3\27\0\1\3"+
    "\1\134\44\3\1\0\3\3\47\0\1\135\75\0\1\136"+
    "\5\0\1\137\11\0\1\140\1\141\2\0\1\142\1\143"+
    "\1\144\1\145\1\146\1\0\1\147\10\0\1\150\2\0"+
    "\3\3\27\0\1\3\1\151\44\3\1\0\3\3\1\0"+
    "\3\3\27\0\20\3\1\152\25\3\1\0\3\3\1\0"+
    "\3\3\27\0\3\3\1\153\42\3\1\0\3\3\1\0"+
    "\3\3\27\0\2\3\1\154\43\3\1\0\3\3\1\0"+
    "\3\3\27\0\12\3\1\155\33\3\1\0\3\3\1\0"+
    "\3\3\27\0\24\3\1\156\21\3\1\0\3\3\3\0"+
    "\1\115\17\0\1\157\60\0\1\115\1\0\3\3\27\0"+
    "\2\3\1\160\43\3\1\0\3\3\1\0\3\3\27\0"+
    "\5\3\1\161\40\3\1\0\3\3\1\0\3\3\27\0"+
    "\14\3\1\162\31\3\1\0\3\3\1\0\3\3\27\0"+
    "\3\3\1\163\42\3\1\0\3\3\1\0\3\3\27\0"+
    "\24\3\1\164\21\3\1\0\3\3\1\0\3\3\27\0"+
    "\24\3\1\165\21\3\1\0\3\3\1\0\3\3\27\0"+
    "\6\3\1\166\2\3\1\167\34\3\1\0\3\3\1\0"+
    "\3\3\27\0\1\3\1\170\44\3\1\0\3\3\1\0"+
    "\3\3\27\0\10\3\1\171\35\3\1\0\3\3\1\0"+
    "\3\3\27\0\1\3\1\172\44\3\1\0\3\3\1\0"+
    "\3\3\27\0\12\3\1\173\33\3\1\0\3\3\1\0"+
    "\3\3\27\0\12\3\1\174\33\3\1\0\3\3\1\0"+
    "\3\3\27\0\24\3\1\175\21\3\1\0\3\3\50\0"+
    "\1\176\72\0\1\177\20\0\1\200\67\0\1\201\75\0"+
    "\1\202\117\0\1\203\1\204\12\0\1\205\1\0\1\206"+
    "\1\207\1\210\1\211\1\212\1\0\1\213\1\214\4\0"+
    "\1\215\2\0\1\216\37\0\1\217\1\0\1\220\102\0"+
    "\1\221\3\0\1\222\100\0\1\223\104\0\1\224\20\0"+
    "\1\225\70\0\1\226\11\0\1\227\71\0\1\230\14\0"+
    "\1\231\104\0\1\232\26\0\3\3\27\0\3\3\1\233"+
    "\42\3\1\0\3\3\1\0\3\3\27\0\21\3\1\234"+
    "\24\3\1\0\3\3\1\0\3\3\27\0\25\3\1\235"+
    "\20\3\1\0\3\3\1\0\3\3\27\0\24\3\1\236"+
    "\21\3\1\0\3\3\1\0\3\3\27\0\10\3\1\237"+
    "\35\3\1\0\3\3\1\0\3\3\27\0\1\240\45\3"+
    "\1\0\3\3\1\0\3\3\27\0\1\241\45\3\1\0"+
    "\3\3\1\0\3\3\27\0\24\3\1\242\21\3\1\0"+
    "\3\3\1\0\3\3\27\0\5\3\1\243\40\3\1\0"+
    "\3\3\1\0\3\3\27\0\1\3\1\244\44\3\1\0"+
    "\3\3\1\0\3\3\27\0\1\3\1\245\44\3\1\0"+
    "\3\3\1\0\3\3\27\0\5\3\1\246\40\3\1\0"+
    "\3\3\1\0\3\3\27\0\21\3\1\247\24\3\1\0"+
    "\3\3\1\0\3\3\27\0\12\3\1\250\33\3\1\0"+
    "\3\3\1\0\3\3\27\0\21\3\1\251\24\3\1\0"+
    "\3\3\1\0\3\3\27\0\12\3\1\252\33\3\1\0"+
    "\3\3\1\0\3\3\27\0\7\3\1\253\36\3\1\0"+
    "\3\3\1\0\3\3\27\0\5\3\1\254\40\3\1\0"+
    "\3\3\1\0\3\3\27\0\25\3\1\255\20\3\1\0"+
    "\3\3\35\0\1\256\21\0\1\257\72\0\1\260\74\0"+
    "\1\261\140\0\1\262\56\0\1\263\74\0\1\264\20\0"+
    "\1\265\66\0\1\266\104\0\1\267\104\0\1\270\15\0"+
    "\1\271\104\0\1\272\66\0\1\273\1\0\1\274\13\0"+
    "\1\275\3\0\1\276\57\0\1\277\122\0\1\300\73\0"+
    "\1\301\16\0\1\302\62\0\1\303\22\0\1\304\60\0"+
    "\1\305\120\0\1\306\114\0\1\307\103\0\1\310\76\0"+
    "\1\311\1\312\77\0\1\313\110\0\1\314\113\0\1\315"+
    "\60\0\1\316\3\0\1\317\103\0\1\320\124\0\1\321"+
    "\70\0\1\322\101\0\1\323\107\0\1\324\42\0\3\3"+
    "\27\0\22\3\1\325\23\3\1\0\3\3\1\0\3\3"+
    "\27\0\5\3\1\326\40\3\1\0\3\3\1\0\3\3"+
    "\27\0\24\3\1\327\21\3\1\0\3\3\1\0\3\3"+
    "\27\0\3\3\1\330\42\3\1\0\3\3\1\0\3\3"+
    "\27\0\10\3\1\331\35\3\1\0\3\3\1\0\3\3"+
    "\27\0\2\3\1\332\43\3\1\0\3\3\1\0\3\3"+
    "\27\0\26\3\1\333\17\3\1\0\3\3\1\0\3\3"+
    "\27\0\26\3\1\334\17\3\1\0\3\3\1\0\3\3"+
    "\27\0\24\3\1\335\21\3\1\0\3\3\1\0\3\3"+
    "\27\0\7\3\1\336\36\3\1\0\3\3\1\0\3\3"+
    "\27\0\1\3\1\337\44\3\1\0\3\3\1\0\3\3"+
    "\27\0\1\340\45\3\1\0\3\3\1\0\3\3\27\0"+
    "\25\3\1\341\20\3\1\0\3\3\1\0\3\3\27\0"+
    "\5\3\1\342\40\3\1\0\3\3\1\0\3\3\27\0"+
    "\5\3\1\343\40\3\1\0\3\3\1\0\3\3\27\0"+
    "\7\3\1\344\36\3\1\0\3\3\1\0\3\3\27\0"+
    "\3\3\1\345\42\3\1\0\3\3\36\0\1\346\15\0"+
    "\1\347\101\0\1\350\75\0\1\351\107\0\1\352\75\0"+
    "\1\353\105\0\1\354\101\0\1\355\113\0\1\356\114\0"+
    "\1\357\111\0\1\360\104\0\1\361\66\0\1\362\121\0"+
    "\1\363\105\0\1\364\62\0\1\365\102\0\1\366\112\0"+
    "\1\367\113\0\1\370\100\0\1\371\72\0\1\372\146\0"+
    "\1\373\63\0\1\374\74\0\1\375\112\0\1\376\115\0"+
    "\1\377\57\0\1\u0100\110\0\1\u0101\107\0\1\u0102\75\0"+
    "\1\u0103\106\0\1\u0104\16\0\1\u0105\60\0\1\u0106\150\0"+
    "\1\u0107\52\0\1\u0108\104\0\1\u0109\116\0\1\u010a\62\0"+
    "\1\u010b\111\0\1\u010c\105\0\1\u010d\77\0\1\u010e\47\0"+
    "\3\3\27\0\7\3\1\u010f\36\3\1\0\3\3\1\0"+
    "\3\3\27\0\1\3\1\u0110\44\3\1\0\3\3\1\0"+
    "\3\3\27\0\1\u0111\45\3\1\0\3\3\1\0\3\3"+
    "\27\0\13\3\1\u0112\32\3\1\0\3\3\1\0\3\3"+
    "\27\0\30\3\1\u0113\15\3\1\0\3\3\1\0\3\3"+
    "\27\0\4\3\1\u0114\41\3\1\0\3\3\1\0\3\3"+
    "\27\0\5\3\1\u0115\40\3\1\0\3\3\1\0\3\3"+
    "\27\0\10\3\1\u0116\35\3\1\0\3\3\1\0\3\3"+
    "\27\0\17\3\1\u0117\26\3\1\0\3\3\1\0\3\3"+
    "\27\0\25\3\1\u0118\20\3\1\0\3\3\1\0\3\3"+
    "\27\0\7\3\1\u0119\36\3\1\0\3\3\1\0\3\3"+
    "\27\0\7\3\1\u011a\36\3\1\0\3\3\1\0\3\3"+
    "\27\0\5\3\1\u011b\40\3\1\0\3\3\34\0\1\u011c"+
    "\123\0\1\u011d\75\0\1\u011e\100\0\1\u011f\106\0\1\u0120"+
    "\130\0\1\u0121\51\0\1\u0122\130\0\1\u0123\60\0\1\u0124"+
    "\131\0\1\u0125\62\0\1\u0126\104\0\1\u0127\120\0\1\u0128"+
    "\103\0\1\u0129\66\0\1\u012a\115\0\1\u012b\27\0\1\u012c"+
    "\55\0\1\u012d\73\0\1\u012e\115\0\1\u012f\116\0\1\u0130"+
    "\67\0\1\u0131\107\0\1\u0132\102\0\1\u0133\103\0\1\u0134"+
    "\75\0\1\u0135\144\0\1\u0136\51\0\1\u0137\104\0\1\u0138"+
    "\104\0\1\u0139\131\0\1\u013a\1\u013b\1\u013c\50\0\1\u013d"+
    "\111\0\1\u013e\101\0\1\u013f\126\0\1\u0140\67\0\1\u0141"+
    "\75\0\1\u0142\142\0\1\u0143\67\0\1\u0144\131\0\1\u0145"+
    "\36\0\1\u0146\123\0\1\u0147\33\0\3\3\27\0\5\3"+
    "\1\u0148\40\3\1\0\3\3\1\0\3\3\27\0\12\3"+
    "\1\u0149\33\3\1\0\3\3\1\0\3\3\27\0\5\3"+
    "\1\u014a\40\3\1\0\3\3\1\0\3\3\27\0\21\3"+
    "\1\u014b\24\3\1\0\3\3\1\0\3\3\27\0\5\3"+
    "\1\u014c\40\3\1\0\3\3\1\0\3\3\27\0\7\3"+
    "\1\u014d\36\3\1\0\3\3\1\0\3\3\27\0\1\u014e"+
    "\45\3\1\0\3\3\1\0\3\3\27\0\25\3\1\u014f"+
    "\20\3\1\0\3\3\1\0\3\3\27\0\2\3\1\u0150"+
    "\43\3\1\0\3\3\1\0\3\3\27\0\16\3\1\u0151"+
    "\27\3\1\0\3\3\36\0\1\u0152\104\0\1\u0153\125\0"+
    "\1\u0154\61\0\1\u0155\110\0\1\u0156\106\0\1\u0157\104\0"+
    "\1\u0158\76\0\1\u0159\127\0\1\u015a\65\0\1\u015b\104\0"+
    "\1\u015c\111\0\1\u015d\100\0\1\u015e\117\0\1\u015f\107\0"+
    "\1\u0160\63\0\1\u0161\113\0\1\u0162\101\0\1\u0163\102\0"+
    "\1\u0164\100\0\1\u0165\124\0\1\u0166\104\0\1\u0167\65\0"+
    "\1\u0168\136\0\1\u0169\57\0\1\u016a\104\0\1\u016b\100\0"+
    "\1\u016c\101\0\1\u016d\142\0\1\u016e\46\0\1\u016f\104\0"+
    "\1\u0170\111\0\1\u0171\100\0\1\u0172\105\0\1\u0173\111\0"+
    "\1\u0174\77\0\1\u0175\105\0\1\u0176\102\0\1\u0177\127\0"+
    "\1\u0178\26\0\3\3\27\0\3\3\1\u0179\42\3\1\0"+
    "\3\3\1\0\3\3\27\0\11\3\1\u017a\34\3\1\0"+
    "\3\3\1\0\3\3\27\0\1\u017b\45\3\1\0\3\3"+
    "\1\0\3\3\27\0\17\3\1\u017c\26\3\1\0\3\3"+
    "\1\0\3\3\27\0\7\3\1\u017d\36\3\1\0\3\3"+
    "\1\0\3\3\27\0\1\u017e\45\3\1\0\3\3\46\0"+
    "\1\u017f\13\0\1\u0180\70\0\1\u0181\13\0\1\u0182\62\0"+
    "\1\u0183\112\0\1\u0184\13\0\1\u0185\55\0\1\u0186\111\0"+
    "\1\u0187\115\0\1\u0188\7\0\1\u0189\61\0\1\u018a\110\0"+
    "\1\u018b\102\0\1\u018c\102\0\1\u018d\102\0\1\u018e\105\0"+
    "\1\u018f\120\0\1\u0190\66\0\1\u0191\132\0\1\u0192\102\0"+
    "\1\u0193\66\0\1\u0194\103\0\1\u0195\124\0\1\u0196\103\0"+
    "\1\u0197\104\0\1\u0198\65\0\1\u0199\111\0\1\u019a\117\0"+
    "\1\u019b\75\0\1\u019c\121\0\1\u019d\7\0\1\u019e\1\0"+
    "\1\u019f\46\0\1\u01a0\100\0\1\u01a1\141\0\1\u01a2\53\0"+
    "\1\u01a3\121\0\1\u01a4\65\0\1\u01a5\77\0\1\u01a6\140\0"+
    "\1\u01a7\57\0\1\u01a8\122\0\1\u01a9\25\0\3\3\27\0"+
    "\11\3\1\u01aa\34\3\1\0\3\3\1\0\3\3\27\0"+
    "\1\3\1\u01ab\44\3\1\0\3\3\1\0\3\3\27\0"+
    "\7\3\1\u01ac\36\3\1\0\3\3\1\0\3\3\27\0"+
    "\26\3\1\u01ad\17\3\1\0\3\3\1\0\3\3\27\0"+
    "\3\3\1\u01ae\42\3\1\0\3\3\33\0\1\u01af\107\0"+
    "\1\u01b0\101\0\1\u01b1\107\0\1\u01b2\110\0\1\u01b3\75\0"+
    "\1\u01b4\107\0\1\u01b5\102\0\1\u01b6\133\0\1\u01b7\67\0"+
    "\1\u01b8\15\0\1\u01b9\71\0\1\u01ba\105\0\1\u01bb\111\0"+
    "\1\u01bc\61\0\1\u01bd\122\0\1\u01be\67\0\1\u01bf\127\0"+
    "\1\u01c0\111\0\1\u01c1\55\0\1\u01c2\122\0\1\u01c3\72\0"+
    "\1\u01c4\104\0\1\u01c5\76\0\1\u01c6\152\0\1\u01c7\42\0"+
    "\1\u01c8\77\0\1\u01c9\125\0\1\u01ca\107\0\1\u01cb\65\0"+
    "\1\u01cc\116\0\1\u01cd\112\0\1\u01ce\60\0\1\u01cf\135\0"+
    "\1\u01d0\55\0\1\u01d1\125\0\1\u01d2\65\0\1\u01d3\106\0"+
    "\1\u01d4\43\0\3\3\27\0\24\3\1\u01d5\21\3\1\0"+
    "\3\3\1\0\3\3\27\0\2\3\1\u01d6\43\3\1\0"+
    "\3\3\1\0\3\3\27\0\17\3\1\u01d7\26\3\1\0"+
    "\3\3\1\0\3\3\27\0\30\3\1\u01d8\15\3\1\0"+
    "\3\3\1\0\3\3\27\0\1\3\1\u01d9\44\3\1\0"+
    "\3\3\34\0\1\u01da\130\0\1\u01db\60\0\1\u01dc\130\0"+
    "\1\u01dd\72\0\1\u01de\13\0\1\u01df\56\0\1\u01e0\130\0"+
    "\1\u01e1\61\0\1\u01e2\123\0\1\u01e3\63\0\1\u01e4\104\0"+
    "\1\u01e5\113\0\1\u01e6\100\0\1\u01e7\104\0\1\u01e8\104\0"+
    "\1\u01e9\104\0\1\u01ea\101\0\1\u01eb\131\0\1\u01ec\62\0"+
    "\1\u01ed\126\0\1\u01ee\61\0\1\u01ef\114\0\1\u01f0\113\0"+
    "\1\u01f1\63\0\1\u01f2\112\0\1\u01f3\105\0\1\u01f4\102\0"+
    "\1\u01f5\111\0\1\u01f6\116\0\1\u01f7\114\0\1\u01f8\53\0"+
    "\1\u01f9\102\0\1\u01fa\104\0\1\u01fb\122\0\1\u01fc\33\0"+
    "\3\3\27\0\5\3\1\u01fd\40\3\1\0\3\3\1\0"+
    "\3\3\27\0\1\u01fe\45\3\1\0\3\3\1\0\3\3"+
    "\27\0\26\3\1\u01ff\17\3\1\0\3\3\1\0\3\3"+
    "\27\0\21\3\1\u0200\24\3\1\0\3\3\1\0\3\3"+
    "\27\0\26\3\1\u0201\17\3\1\0\3\3\33\0\1\u0202"+
    "\107\0\1\u0203\101\0\1\u0204\115\0\1\u0205\74\0\1\u0206"+
    "\105\0\1\u0207\130\0\1\u0208\110\0\1\u0209\55\0\1\u020a"+
    "\110\0\1\u020b\114\0\1\u020c\70\0\1\u020d\101\0\1\u020e"+
    "\113\0\1\u020f\76\0\1\u0210\141\0\1\u0211\51\0\1\u0212"+
    "\126\0\1\u0213\75\0\1\u0214\71\0\1\u0215\102\0\1\u0216"+
    "\127\0\1\u0217\76\0\1\u0218\101\0\1\u0219\103\0\1\u021a"+
    "\75\0\1\u021b\47\0\3\3\27\0\26\3\1\u021c\17\3"+
    "\1\0\3\3\1\0\3\3\27\0\4\3\1\u021d\41\3"+
    "\1\0\3\3\1\0\3\3\27\0\30\3\1\u021e\15\3"+
    "\1\0\3\3\1\0\3\3\27\0\11\3\1\u021f\34\3"+
    "\1\0\3\3\1\0\3\3\27\0\30\3\1\u0220\15\3"+
    "\1\0\3\3\34\0\1\u0221\130\0\1\u0222\63\0\1\u0223"+
    "\111\0\1\u0224\120\0\1\u0225\72\0\1\u0226\112\0\1\u0227"+
    "\64\0\1\u0228\127\0\1\u0229\76\0\1\u022a\7\0\1\u022b"+
    "\61\0\1\u022c\102\0\1\u022d\105\0\1\u022e\103\0\1\u022f"+
    "\103\0\1\u0230\110\0\1\u0231\106\0\1\u0232\110\0\1\u0233"+
    "\73\0\1\u0234\115\0\1\u0235\72\0\1\u0236\113\0\1\u0237"+
    "\144\0\1\u0238\3\0\3\3\27\0\30\3\1\u0239\15\3"+
    "\1\0\3\3\1\0\3\3\27\0\7\3\1\u023a\36\3"+
    "\1\0\3\3\1\0\3\3\27\0\21\3\1\u023b\24\3"+
    "\1\0\3\3\1\0\3\3\27\0\11\3\1\u023c\34\3"+
    "\1\0\3\3\1\0\3\3\27\0\21\3\1\u023d\24\3"+
    "\1\0\3\3\42\0\1\u023e\121\0\1\u023f\63\0\1\u0240"+
    "\101\0\1\u0241\131\0\1\u0242\104\0\1\u0243\72\0\1\u0244"+
    "\24\0\1\u0245\45\0\1\u0246\112\0\1\u0247\75\0\1\u0248"+
    "\107\0\1\u0249\137\0\1\u024a\72\0\1\u024b\65\0\1\u024c"+
    "\77\0\1\u024d\116\0\1\u024e\77\0\1\u024f\100\0\1\u0250"+
    "\104\0\1\u0251\124\0\1\u0252\31\0\3\3\27\0\1\u0253"+
    "\45\3\1\0\3\3\1\0\3\3\27\0\25\3\1\u0254"+
    "\20\3\1\0\3\3\1\0\3\3\27\0\11\3\1\u0255"+
    "\34\3\1\0\3\3\1\0\3\3\27\0\24\3\1\u0256"+
    "\21\3\1\0\3\3\1\0\3\3\27\0\11\3\1\u0257"+
    "\34\3\1\0\3\3\60\0\1\u0258\64\0\1\u0259\100\0"+
    "\1\u025a\115\0\1\u025b\75\0\1\u025c\101\0\1\u025d\124\0"+
    "\1\u025e\67\0\1\u025f\110\0\1\u0260\77\0\1\u0261\111\0"+
    "\1\u0262\114\0\1\u0263\74\0\1\u0264\104\0\1\u0265\121\0"+
    "\1\u0266\67\0\1\u0267\76\0\1\u0268\51\0\3\3\27\0"+
    "\12\3\1\u0269\33\3\1\0\3\3\1\0\3\3\27\0"+
    "\11\3\1\u026a\34\3\1\0\3\3\1\0\3\3\27\0"+
    "\5\3\1\u026b\40\3\1\0\3\3\1\0\3\3\27\0"+
    "\11\3\1\u026c\34\3\1\0\3\3\64\0\1\u026d\53\0"+
    "\1\u026e\105\0\1\u026f\112\0\1\u0270\76\0\1\u0271\105\0"+
    "\1\u0272\114\0\1\u0273\103\0\1\u0274\102\0\1\u0275\76\0"+
    "\1\u0276\110\0\1\u0277\106\0\1\u0278\142\0\1\u0279\41\0"+
    "\1\u027a\50\0\3\3\27\0\24\3\1\u027b\21\3\1\0"+
    "\3\3\1\0\3\3\27\0\26\3\1\u027c\17\3\1\0"+
    "\3\3\1\0\3\3\27\0\24\3\1\u027d\21\3\1\0"+
    "\3\3\36\0\1\u027e\105\0\1\u027f\101\0\1\u0280\103\0"+
    "\1\u0281\104\0\1\u0282\104\0\1\u0283\123\0\1\u0284\74\0"+
    "\1\u0285\113\0\1\u0286\67\0\1\u0287\103\0\1\u0288\52\0"+
    "\3\3\27\0\5\3\1\u0289\40\3\1\0\3\3\1\0"+
    "\3\3\27\0\30\3\1\u028a\15\3\1\0\3\3\1\0"+
    "\3\3\27\0\5\3\1\u028b\40\3\1\0\3\3\60\0"+
    "\1\u028c\104\0\1\u028d\57\0\1\u028e\107\0\1\u028f\145\0"+
    "\1\u0290\42\0\1\u0291\147\0\1\u0292\37\0\1\u0293\107\0"+
    "\1\u0294\47\0\3\3\27\0\26\3\1\u0295\17\3\1\0"+
    "\3\3\1\0\3\3\27\0\1\u0296\45\3\1\0\3\3"+
    "\1\0\3\3\27\0\26\3\1\u0297\17\3\1\0\3\3"+
    "\36\0\1\u0298\125\0\1\u0299\62\0\1\u029a\103\0\1\u029b"+
    "\112\0\1\u029c\104\0\1\u029d\76\0\1\u029e\105\0\1\u029f"+
    "\103\0\1\u02a0\51\0\3\3\27\0\30\3\1\u02a1\15\3"+
    "\1\0\3\3\1\0\3\3\27\0\12\3\1\u02a2\33\3"+
    "\1\0\3\3\1\0\3\3\27\0\30\3\1\u02a3\15\3"+
    "\1\0\3\3\40\0\1\u02a4\102\0\1\u02a5\152\0\1\u02a6"+
    "\33\0\1\u02a7\104\0\1\u02a8\52\0\3\3\27\0\1\u02a9"+
    "\45\3\1\0\3\3\1\0\3\3\27\0\1\u02aa\45\3"+
    "\1\0\3\3\47\0\1\u02ab\72\0\1\u02ac\105\0\1\u02ad"+
    "\47\0\3\3\27\0\12\3\1\u02ae\33\3\1\0\3\3"+
    "\1\0\3\3\27\0\12\3\1\u02af\33\3\1\0\3\3"+
    "\33\0\1\u02b0\107\0\1\u02b1\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40779];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\3\1\1\11\7\1\5\11"+
    "\1\1\2\11\16\1\1\0\1\1\11\11\1\0\1\11"+
    "\15\1\2\0\7\1\1\0\17\1\14\0\6\1\1\11"+
    "\17\1\34\0\23\1\41\0\1\1\5\0\21\1\31\0"+
    "\1\1\17\0\15\1\3\0\1\11\6\0\1\11\15\0"+
    "\1\11\1\0\2\11\20\0\12\1\10\0\2\11\35\0"+
    "\6\1\11\0\1\11\7\0\1\11\6\0\1\11\13\0"+
    "\3\11\4\0\5\1\23\0\1\11\1\0\1\11\11\0"+
    "\1\11\4\0\1\11\1\0\5\1\4\11\2\0\2\11"+
    "\4\0\1\11\1\1\1\0\2\11\22\0\5\1\4\0"+
    "\1\11\4\0\1\11\5\0\1\11\12\0\5\1\2\11"+
    "\5\0\1\11\1\0\1\11\16\0\5\1\2\0\1\11"+
    "\5\0\2\11\1\0\1\11\11\0\5\1\1\11\1\1"+
    "\1\11\1\0\1\11\14\0\4\1\2\0\1\11\1\0"+
    "\1\11\5\0\1\11\3\0\3\1\6\0\1\11\1\0"+
    "\1\11\2\0\3\1\11\0\3\1\1\0\1\11\1\0"+
    "\2\11\1\1\2\0\1\11\3\1\2\11\3\0\2\1"+
    "\1\11\1\0\1\11\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[689];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public static String lexeme;
guardarInfoCod c = new guardarInfoCod();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { c.linea=yyline;lexeme=yytext(); return Parentesis_a;
          }
        case 119: break;
        case 88: 
          { c.linea=yyline;lexeme=yytext(); return LLDGesferaSol;
          }
        case 120: break;
        case 99: 
          { c.linea=yyline;lexeme=yytext(); return LG_Vista_Modelo;
          }
        case 121: break;
        case 91: 
          { c.linea=yyline;lexeme=yytext(); return LG_Linea_Ciclo;
          }
        case 122: break;
        case 95: 
          { c.linea=yyline;lexeme=yytext(); return Orden_principal;
          }
        case 123: break;
        case 55: 
          { c.linea=yyline;lexeme=yytext(); return LG_RGBA;
          }
        case 124: break;
        case 71: 
          { c.linea=yyline;lexeme=yytext(); return LG_Textura;
          }
        case 125: break;
        case 101: 
          { c.linea=yyline;lexeme=yytext(); return LG_Triangulo_Lin;
          }
        case 126: break;
        case 57: 
          { c.linea=yyline;lexeme=yytext(); return Dibujar;
          }
        case 127: break;
        case 15: 
          { c.linea=yyline;lexeme=yytext(); return Igual;
          }
        case 128: break;
        case 106: 
          { c.linea=yyline;lexeme=yytext(); return LG_MuestreoMultiple;
          }
        case 129: break;
        case 68: 
          { c.linea=yyline;lexeme=yytext(); return LGVertice;
          }
        case 130: break;
        case 77: 
          { c.linea=yyline;lexeme=yytext(); return LLDGcuboSol;
          }
        case 131: break;
        case 47: 
          { c.linea=yyline;lexeme=yytext(); return Modelo;
          }
        case 132: break;
        case 75: 
          { c.linea=yyline;lexeme=yytext(); return LLDGconoSol;
          }
        case 133: break;
        case 8: 
          { c.linea=yyline;lexeme=yytext(); return Suma;
          }
        case 134: break;
        case 60: 
          { c.linea=yyline;lexeme=yytext(); return Mientras;
          }
        case 135: break;
        case 28: 
          { c.linea=yyline; lexeme=yytext(); return Or;
          }
        case 136: break;
        case 118: 
          { c.linea=yyline;lexeme=yytext(); return LGPosicionVentanaInicio;
          }
        case 137: break;
        case 53: 
          { c.linea=yyline;lexeme=yytext(); return LG_Solo;
          }
        case 138: break;
        case 116: 
          { c.linea=yyline;lexeme=yytext(); return Profundidad_Buffer_Bit;
          }
        case 139: break;
        case 64: 
          { c.linea=yyline;lexeme=yytext(); return LG_Lineas;
          }
        case 140: break;
        case 114: 
          { c.linea=yyline;lexeme=yytext(); return LGMatrizOrtografica2D;
          }
        case 141: break;
        case 102: 
          { c.linea=yyline;lexeme=yytext(); return LGMostrarFuncion;
          }
        case 142: break;
        case 80: 
          { c.linea=yyline;lexeme=yytext(); return LG_Luminosa;
          }
        case 143: break;
        case 65: 
          { c.linea=yyline;lexeme=yytext(); return LG_Puntos;
          }
        case 144: break;
        case 51: 
          { c.linea=yyline;lexeme=yytext(); return Mostrar;
          }
        case 145: break;
        case 4: 
          { /*Ignore*/
          }
        case 146: break;
        case 36: 
          { c.linea=yyline;lexeme=yytext(); return Cad;
          }
        case 147: break;
        case 21: 
          { c.linea=yyline;lexeme=yytext(); return Llave_c;
          }
        case 148: break;
        case 103: 
          { c.linea=yyline;lexeme=yytext(); return LGVolverAMostrar;
          }
        case 149: break;
        case 18: 
          { c.linea=yyline;lexeme=yytext(); return Corchete_a;
          }
        case 150: break;
        case 24: 
          { c.linea=yyline;lexeme=yytext(); return Punto;
          }
        case 151: break;
        case 1: 
          { c.linea=yyline;lexeme=yytext(); return ERROR;
          }
        case 152: break;
        case 50: 
          { c.linea=yyline;lexeme=yytext(); return Obtener;
          }
        case 153: break;
        case 117: 
          { c.linea=yyline;lexeme=yytext(); return Acumulacion_Buffer_Bit;
          }
        case 154: break;
        case 38: 
          { c.linea=yyline;lexeme=yytext(); return Ent;
          }
        case 155: break;
        case 59: 
          { c.linea=yyline;lexeme=yytext(); return Programa;
          }
        case 156: break;
        case 110: 
          { c.linea=yyline;lexeme=yytext(); return LGRemodeladoFuncion;
          }
        case 157: break;
        case 41: 
          { c.linea=yyline;lexeme=yytext(); return Bool;
          }
        case 158: break;
        case 22: 
          { c.linea=yyline;lexeme=yytext(); return Dospuntos;
          }
        case 159: break;
        case 5: 
          { c.linea=yyline;lexeme=yytext(); return Division;
          }
        case 160: break;
        case 112: 
          { c.linea=yyline;lexeme=yytext(); return LGlimpiarBufferColor;
          }
        case 161: break;
        case 94: 
          { c.linea=yyline;lexeme=yytext(); return LGModoPoligono;
          }
        case 162: break;
        case 89: 
          { c.linea=yyline;lexeme=yytext(); return LG_Proyeccion;
          }
        case 163: break;
        case 45: 
          { c.linea=yyline;lexeme=yytext(); return NumDec;
          }
        case 164: break;
        case 63: 
          { c.linea=yyline;lexeme=yytext(); return Elemento;
          }
        case 165: break;
        case 109: 
          { c.linea=yyline;lexeme=yytext(); return LGMatrizOrtografica;
          }
        case 166: break;
        case 78: 
          { c.linea=yyline;lexeme=yytext(); return LGrectanLin;
          }
        case 167: break;
        case 96: 
          { c.linea=yyline;lexeme=yytext(); return LGLazoPrincipal;
          }
        case 168: break;
        case 27: 
          { c.linea=yyline;lexeme=yytext(); return Exponente;
          }
        case 169: break;
        case 7: 
          { c.linea=yyline;lexeme=yytext();return Comillas;
          }
        case 170: break;
        case 37: 
          { c.linea=yyline;lexeme=yytext(); return Fin;
          }
        case 171: break;
        case 104: 
          { c.linea=yyline;lexeme=yytext(); return LGMatrizIdentidad;
          }
        case 172: break;
        case 46: 
          { c.linea=yyline;lexeme=yytext(); return Montar;
          }
        case 173: break;
        case 2: 
          { c.linea=yyline;lexeme=yytext(); return Identificador;
          }
        case 174: break;
        case 43: 
          { c.linea=yyline;lexeme=yytext(); return Hacer;
          }
        case 175: break;
        case 115: 
          { c.linea=yyline;lexeme=yytext(); return LGTamañoVentanaInicio;
          }
        case 176: break;
        case 40: 
          { c.linea=yyline;lexeme=yytext(); return Sino;
          }
        case 177: break;
        case 73: 
          { c.linea=yyline;lexeme=yytext(); return LGTerminar;
          }
        case 178: break;
        case 81: 
          { c.linea=yyline;lexeme=yytext(); return LG_Cuadrado;
          }
        case 179: break;
        case 11: 
          { c.linea=yyline;lexeme=yytext(); return Modulo;
          }
        case 180: break;
        case 92: 
          { c.linea=yyline;lexeme=yytext(); return LG_Acumulacion;
          }
        case 181: break;
        case 49: 
          { c.linea=yyline;lexeme=yytext(); return NumDecL;
          }
        case 182: break;
        case 6: 
          { c.linea=yyline;lexeme=yytext();return SaltoLinea;
          }
        case 183: break;
        case 67: 
          { c.linea=yyline;lexeme=yytext(); return LGVentana;
          }
        case 184: break;
        case 32: 
          { c.linea=yyline;lexeme=yytext(); return MenorIgual;
          }
        case 185: break;
        case 69: 
          { c.linea=yyline;lexeme=yytext(); return LGEmpezar;
          }
        case 186: break;
        case 33: 
          { c.linea=yyline;lexeme=yytext(); return Igualque;
          }
        case 187: break;
        case 20: 
          { c.linea=yyline;lexeme=yytext(); return Llave_a;
          }
        case 188: break;
        case 12: 
          { c.linea=yyline; lexeme=yytext(); return Not;
          }
        case 189: break;
        case 31: 
          { c.linea=yyline;lexeme=yytext(); return MayorIgual;
          }
        case 190: break;
        case 66: 
          { c.linea=yyline;lexeme=yytext(); return LG_Indice;
          }
        case 191: break;
        case 107: 
          { c.linea=yyline;lexeme=yytext(); return LGModoVisualizacion;
          }
        case 192: break;
        case 58: 
          { c.linea=yyline;lexeme=yytext(); return Imprimir;
          }
        case 193: break;
        case 100: 
          { c.linea=yyline;lexeme=yytext(); return Color_Buffer_Bit;
          }
        case 194: break;
        case 42: 
          { c.linea=yyline;lexeme=yytext(); return LGVer;
          }
        case 195: break;
        case 85: 
          { c.linea=yyline;lexeme=yytext(); return LG_Plantilla;
          }
        case 196: break;
        case 44: 
          { c.linea=yyline;lexeme=yytext(); return Inicio;
          }
        case 197: break;
        case 62: 
          { c.linea=yyline;lexeme=yytext(); return LG_Color;
          }
        case 198: break;
        case 30: 
          { c.linea=yyline;lexeme=yytext(); return Diferente;
          }
        case 199: break;
        case 17: 
          { c.linea=yyline;lexeme=yytext(); return Parentesis_c;
          }
        case 200: break;
        case 97: 
          { c.linea=yyline;lexeme=yytext(); return LGlimpiarBuffer;
          }
        case 201: break;
        case 87: 
          { c.linea=yyline;lexeme=yytext(); return LLDGesferaLin;
          }
        case 202: break;
        case 111: 
          { c.linea=yyline;lexeme=yytext(); return Plantilla_Buffer_Bit;
          }
        case 203: break;
        case 82: 
          { c.linea=yyline;lexeme=yytext(); return LG_Poligono;
          }
        case 204: break;
        case 86: 
          { c.linea=yyline;lexeme=yytext(); return LGModoMatriz;
          }
        case 205: break;
        case 83: 
          { c.linea=yyline;lexeme=yytext(); return LG_Profundo;
          }
        case 206: break;
        case 10: 
          { c.linea=yyline;lexeme=yytext(); return Multiplicacion;
          }
        case 207: break;
        case 14: 
          { c.linea=yyline;lexeme=yytext(); return Menorque;
          }
        case 208: break;
        case 93: 
          { c.linea=yyline;lexeme=yytext(); return LGCrearVentana;
          }
        case 209: break;
        case 23: 
          { c.linea=yyline;lexeme=yytext(); return Pycoma;
          }
        case 210: break;
        case 113: 
          { c.linea=yyline;lexeme=yytext(); return LG_Triangulo_Abanico;
          }
        case 211: break;
        case 79: 
          { c.linea=yyline;lexeme=yytext(); return LGrectanSol;
          }
        case 212: break;
        case 76: 
          { c.linea=yyline;lexeme=yytext(); return LLDGcuboLin;
          }
        case 213: break;
        case 98: 
          { c.linea=yyline;lexeme=yytext(); return LG_Cuadrado_Lin;
          }
        case 214: break;
        case 74: 
          { c.linea=yyline;lexeme=yytext(); return LLDGconoLin;
          }
        case 215: break;
        case 61: 
          { c.linea=yyline;lexeme=yytext(); return LG_Doble;
          }
        case 216: break;
        case 56: 
          { c.linea=yyline;lexeme=yytext(); return LGColor;
          }
        case 217: break;
        case 25: 
          { c.linea=yyline;lexeme=yytext();return Op_incremento;
          }
        case 218: break;
        case 52: 
          { c.linea=yyline;lexeme=yytext(); return LGrotar;
          }
        case 219: break;
        case 84: 
          { c.linea=yyline;lexeme=yytext(); return LG_Linea_Lin;
          }
        case 220: break;
        case 90: 
          { c.linea=yyline;lexeme=yytext(); return LG_Triangulos;
          }
        case 221: break;
        case 35: 
          { c.linea=yyline;lexeme=yytext(); return Si;
          }
        case 222: break;
        case 34: 
          { c.linea=yyline;lexeme=yytext(); return Definicion;
          }
        case 223: break;
        case 39: 
          { c.linea=yyline;lexeme=yytext(); return LLDG;
          }
        case 224: break;
        case 29: 
          { c.linea=yyline; lexeme=yytext(); return And;
          }
        case 225: break;
        case 105: 
          { c.linea=yyline;lexeme=yytext(); return LGEjecucionLineas;
          }
        case 226: break;
        case 70: 
          { c.linea=yyline;lexeme=yytext(); return LG_Estereo;
          }
        case 227: break;
        case 54: 
          { c.linea=yyline;lexeme=yytext(); return LG_Alfa;
          }
        case 228: break;
        case 3: 
          { c.linea=yyline;lexeme=yytext(); return Numero;
          }
        case 229: break;
        case 26: 
          { c.linea=yyline;lexeme=yytext(); return Op_decremento;
          }
        case 230: break;
        case 108: 
          { c.linea=yyline;lexeme=yytext(); return LGMatrizPerspectiva;
          }
        case 231: break;
        case 13: 
          { c.linea=yyline;lexeme=yytext(); return Mayorque;
          }
        case 232: break;
        case 19: 
          { c.linea=yyline;lexeme=yytext(); return Corchete_c;
          }
        case 233: break;
        case 72: 
          { c.linea=yyline;lexeme=yytext(); return LGMaterial;
          }
        case 234: break;
        case 48: 
          { c.linea=yyline;lexeme=yytext(); return LG_RGB;
          }
        case 235: break;
        case 9: 
          { c.linea=yyline;lexeme=yytext(); return Resta;
          }
        case 236: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
