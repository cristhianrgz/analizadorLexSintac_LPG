
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 12 01:00:32 MST 2019
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import codigo.VenPrincipal;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 12 01:00:32 MST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\002\007\000\002\002\012\000\002\003\004" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\006\011" +
    "\000\002\006\012\000\002\031\010\000\002\031\005\000" +
    "\002\031\010\000\002\031\005\000\002\007\007\000\002" +
    "\007\006\000\002\007\012\000\002\007\012\000\002\007" +
    "\011\000\002\007\007\000\002\007\011\000\002\007\012" +
    "\000\002\007\006\000\002\007\007\000\002\007\006\000" +
    "\002\007\006\000\002\007\007\000\002\007\006\000\002" +
    "\007\006\000\002\007\007\000\002\007\006\000\002\007" +
    "\005\000\002\007\007\000\002\007\007\000\002\007\007" +
    "\000\002\007\007\000\002\007\007\000\002\007\006\000" +
    "\002\007\006\000\002\007\007\000\002\007\007\000\002" +
    "\007\006\000\002\007\005\000\002\007\005\000\002\007" +
    "\007\000\002\007\006\000\002\007\013\000\002\007\011" +
    "\000\002\007\007\000\002\007\012\000\002\007\012\000" +
    "\002\007\014\000\002\007\006\000\002\007\007\000\002" +
    "\007\006\000\002\007\007\000\002\014\007\000\002\017" +
    "\011\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\020\012\000\002\020\011\000\002\020\011\000\002" +
    "\021\006\000\002\022\003\000\002\022\003\000\002\023" +
    "\011\000\002\023\010\000\002\024\005\000\002\024\005" +
    "\000\002\024\004\000\002\024\003\000\002\030\005\000" +
    "\002\030\003\000\002\025\006\000\002\005\005\000\002" +
    "\005\007\000\002\005\007\000\002\010\003\000\002\010" +
    "\003\000\002\011\010\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\004\005\001\002\000\004\002\u0132\001" +
    "\002\000\100\003\036\005\040\011\046\015\055\016\056" +
    "\017\012\021\053\024\054\026\007\027\057\030\060\034" +
    "\042\052\050\061\014\062\016\064\021\065\022\100\024" +
    "\105\033\107\061\112\025\113\010\114\015\115\006\116" +
    "\034\117\062\122\041\140\052\143\035\162\023\163\031" +
    "\001\002\000\004\163\u012e\001\002\000\106\003\uff98\005" +
    "\uff98\006\uff98\011\uff98\015\uff98\016\uff98\017\uff98\021\uff98" +
    "\022\uff98\024\uff98\026\uff98\027\uff98\030\uff98\034\uff98\052" +
    "\uff98\061\uff98\062\uff98\064\uff98\065\uff98\100\uff98\105\uff98" +
    "\107\uff98\112\uff98\113\uff98\114\uff98\115\uff98\116\uff98\117" +
    "\uff98\122\uff98\140\uff98\143\uff98\163\uff98\164\uff98\170\uff98" +
    "\001\002\000\004\163\u012a\001\002\000\004\140\u0128\001" +
    "\002\000\004\140\u0124\001\002\000\106\003\036\005\040" +
    "\006\ufffb\011\046\015\055\016\056\017\012\021\053\022" +
    "\ufffb\024\054\026\007\027\057\030\060\034\042\052\050" +
    "\061\014\062\016\064\021\065\022\100\024\105\033\107" +
    "\061\112\025\113\010\114\015\115\006\116\034\117\062" +
    "\122\041\140\052\143\035\163\031\164\ufffb\170\ufffb\001" +
    "\002\000\004\163\u0107\001\002\000\004\163\u0103\001\002" +
    "\000\004\163\375\001\002\000\004\006\373\001\002\000" +
    "\112\003\uff92\005\uff92\006\uff92\011\uff92\015\uff92\016\uff92" +
    "\017\uff92\021\uff92\022\uff92\024\uff92\026\uff92\027\uff92\030" +
    "\uff92\034\uff92\052\uff92\061\uff92\062\uff92\064\uff92\065\uff92" +
    "\100\uff92\105\uff92\107\uff92\112\uff92\113\uff92\114\uff92\115" +
    "\uff92\116\uff92\117\uff92\122\uff92\140\uff92\141\uff92\142\uff92" +
    "\143\uff92\163\uff92\164\uff92\170\uff92\001\002\000\004\163" +
    "\353\001\002\000\004\163\334\001\002\000\100\003\036" +
    "\005\040\007\324\011\046\015\055\016\056\017\012\021" +
    "\053\024\054\026\007\027\057\030\060\034\042\052\050" +
    "\061\014\062\016\064\021\065\022\100\024\105\033\107" +
    "\061\112\025\113\010\114\015\115\006\116\034\117\062" +
    "\122\041\140\052\143\035\163\031\001\002\000\004\163" +
    "\317\001\002\000\004\163\275\001\002\000\106\003\ufff4" +
    "\005\ufff4\006\ufff4\011\ufff4\015\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\034\ufff4" +
    "\052\ufff4\061\ufff4\062\ufff4\064\ufff4\065\ufff4\100\ufff4\105" +
    "\ufff4\107\ufff4\112\ufff4\113\ufff4\114\ufff4\115\ufff4\116\ufff4" +
    "\117\ufff4\122\ufff4\140\ufff4\143\ufff4\163\ufff4\164\ufff4\170" +
    "\ufff4\001\002\000\106\003\ufff8\005\ufff8\006\ufff8\011\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\024\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\034\ufff8\052\ufff8\061\ufff8\062\ufff8" +
    "\064\ufff8\065\ufff8\100\ufff8\105\ufff8\107\ufff8\112\ufff8\113" +
    "\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8\122\ufff8\140\ufff8" +
    "\143\ufff8\163\ufff8\164\ufff8\170\ufff8\001\002\000\140\003" +
    "\uff90\005\uff90\006\uff90\011\uff90\015\uff90\016\uff90\017\uff90" +
    "\021\uff90\022\uff90\024\uff90\026\uff90\027\uff90\030\uff90\034" +
    "\uff90\052\uff90\061\uff90\062\uff90\064\uff90\065\uff90\100\uff90" +
    "\105\uff90\107\uff90\112\uff90\113\uff90\114\uff90\115\uff90\116" +
    "\uff90\117\uff90\122\uff90\140\uff90\141\uff90\142\uff90\143\uff90" +
    "\144\266\145\271\147\272\150\270\151\267\153\273\154" +
    "\102\155\101\156\104\157\077\160\103\163\uff90\164\uff90" +
    "\170\uff90\001\002\000\012\030\060\140\076\143\035\163" +
    "\031\001\002\000\106\003\ufff9\005\ufff9\006\ufff9\011\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\024\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\034\ufff9\052\ufff9\061\ufff9\062\ufff9" +
    "\064\ufff9\065\ufff9\100\ufff9\105\ufff9\107\ufff9\112\ufff9\113" +
    "\ufff9\114\ufff9\115\ufff9\116\ufff9\117\ufff9\122\ufff9\140\ufff9" +
    "\143\ufff9\163\ufff9\164\ufff9\170\ufff9\001\002\000\004\163" +
    "\257\001\002\000\004\163\253\001\002\000\012\030\060" +
    "\140\076\143\035\163\031\001\002\000\006\162\251\170" +
    "\250\001\002\000\106\003\ufff0\005\ufff0\006\ufff0\011\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\024\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\034\ufff0\052\ufff0\061\ufff0\062\ufff0" +
    "\064\ufff0\065\ufff0\100\ufff0\105\ufff0\107\ufff0\112\ufff0\113" +
    "\ufff0\114\ufff0\115\ufff0\116\ufff0\117\ufff0\122\ufff0\140\ufff0" +
    "\143\ufff0\163\ufff0\164\ufff0\170\ufff0\001\002\000\004\140" +
    "\217\001\002\000\004\163\213\001\002\000\004\163\206" +
    "\001\002\000\112\003\ufff7\005\ufff7\006\ufff7\011\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\024\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\034\ufff7\052\ufff7\061\ufff7\062\ufff7\064" +
    "\ufff7\065\ufff7\100\ufff7\105\ufff7\107\ufff7\112\ufff7\113\ufff7" +
    "\114\ufff7\115\ufff7\116\ufff7\117\ufff7\122\ufff7\140\ufff7\141" +
    "\115\142\114\143\ufff7\163\ufff7\164\ufff7\170\ufff7\001\002" +
    "\000\106\003\ufff3\005\ufff3\006\ufff3\011\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\024\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\034\ufff3\052\ufff3\061\ufff3\062\ufff3\064\ufff3\065" +
    "\ufff3\100\ufff3\105\ufff3\107\ufff3\112\ufff3\113\ufff3\114\ufff3" +
    "\115\ufff3\116\ufff3\117\ufff3\122\ufff3\140\ufff3\143\ufff3\163" +
    "\ufff3\164\ufff3\170\ufff3\001\002\000\106\003\ufffa\005\ufffa" +
    "\006\ufffa\011\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022" +
    "\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\034\ufffa\052\ufffa" +
    "\061\ufffa\062\ufffa\064\ufffa\065\ufffa\100\ufffa\105\ufffa\107" +
    "\ufffa\112\ufffa\113\ufffa\114\ufffa\115\ufffa\116\ufffa\117\ufffa" +
    "\122\ufffa\140\ufffa\143\ufffa\163\ufffa\164\ufffa\170\ufffa\001" +
    "\002\000\004\140\uff8b\001\002\000\106\003\ufff5\005\ufff5" +
    "\006\ufff5\011\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5\034\ufff5\052\ufff5" +
    "\061\ufff5\062\ufff5\064\ufff5\065\ufff5\100\ufff5\105\ufff5\107" +
    "\ufff5\112\ufff5\113\ufff5\114\ufff5\115\ufff5\116\ufff5\117\ufff5" +
    "\122\ufff5\140\ufff5\143\ufff5\163\ufff5\164\ufff5\170\ufff5\001" +
    "\002\000\004\163\150\001\002\000\106\003\ufff6\005\ufff6" +
    "\006\ufff6\011\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022" +
    "\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\034\ufff6\052\ufff6" +
    "\061\ufff6\062\ufff6\064\ufff6\065\ufff6\100\ufff6\105\ufff6\107" +
    "\ufff6\112\ufff6\113\ufff6\114\ufff6\115\ufff6\116\ufff6\117\ufff6" +
    "\122\ufff6\140\ufff6\143\ufff6\163\ufff6\164\ufff6\170\ufff6\001" +
    "\002\000\142\003\uff83\005\uff83\006\uff83\011\uff83\015\uff83" +
    "\016\uff83\017\uff83\021\uff83\022\uff83\024\uff83\026\uff83\027" +
    "\uff83\030\uff83\034\uff83\052\uff83\061\uff83\062\uff83\064\uff83" +
    "\065\uff83\100\uff83\105\uff83\107\uff83\112\uff83\113\uff83\114" +
    "\uff83\115\uff83\116\uff83\117\uff83\122\uff83\140\uff83\141\uff83" +
    "\142\uff83\143\uff83\144\uff83\145\uff83\146\145\147\uff83\150" +
    "\uff83\151\uff83\153\uff83\154\uff83\155\uff83\156\uff83\157\uff83" +
    "\160\uff83\163\uff83\164\uff83\170\uff83\001\002\000\004\163" +
    "\126\001\002\000\004\163\112\001\002\000\004\140\uff8a" +
    "\001\002\000\004\140\073\001\002\000\106\003\uff99\005" +
    "\uff99\006\uff99\011\uff99\015\uff99\016\uff99\017\uff99\021\uff99" +
    "\022\uff99\024\uff99\026\uff99\027\uff99\030\uff99\034\uff99\052" +
    "\uff99\061\uff99\062\uff99\064\uff99\065\uff99\100\uff99\105\uff99" +
    "\107\uff99\112\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117" +
    "\uff99\122\uff99\140\uff99\143\uff99\163\uff99\164\uff99\170\uff99" +
    "\001\002\000\144\003\uff82\005\uff82\006\uff82\011\uff82\015" +
    "\uff82\016\uff82\017\uff82\021\uff82\022\uff82\024\uff82\026\uff82" +
    "\027\uff82\030\uff82\034\uff82\052\uff82\061\uff82\062\uff82\064" +
    "\uff82\065\uff82\100\uff82\105\uff82\107\uff82\112\uff82\113\uff82" +
    "\114\uff82\115\uff82\116\uff82\117\uff82\122\uff82\140\uff82\141" +
    "\uff82\142\uff82\143\uff82\144\uff82\145\uff82\147\uff82\150\uff82" +
    "\151\uff82\153\uff82\154\uff82\155\uff82\156\uff82\157\uff82\160" +
    "\uff82\161\uff82\162\uff82\163\uff82\164\uff82\170\uff82\001\002" +
    "\000\004\163\067\001\002\000\004\163\063\001\002\000" +
    "\076\003\036\005\040\011\046\015\055\016\056\017\012" +
    "\021\053\024\054\026\007\027\057\030\060\034\042\052" +
    "\050\061\014\062\016\064\021\065\022\100\024\105\033" +
    "\107\061\112\025\113\010\114\015\115\006\116\034\117" +
    "\062\122\041\140\052\143\035\163\031\001\002\000\004" +
    "\164\065\001\002\000\004\162\066\001\002\000\106\003" +
    "\uffc0\005\uffc0\006\uffc0\011\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\021\uffc0\022\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\034" +
    "\uffc0\052\uffc0\061\uffc0\062\uffc0\064\uffc0\065\uffc0\100\uffc0" +
    "\105\uffc0\107\uffc0\112\uffc0\113\uffc0\114\uffc0\115\uffc0\116" +
    "\uffc0\117\uffc0\122\uffc0\140\uffc0\143\uffc0\163\uffc0\164\uffc0" +
    "\170\uffc0\001\002\000\076\003\036\005\040\011\046\015" +
    "\055\016\056\017\012\021\053\024\054\026\007\027\057" +
    "\030\060\034\042\052\050\061\014\062\016\064\021\065" +
    "\022\100\024\105\033\107\061\112\025\113\010\114\015" +
    "\115\006\116\034\117\062\122\041\140\052\143\035\163" +
    "\031\001\002\000\004\164\071\001\002\000\004\162\072" +
    "\001\002\000\106\003\uffd5\005\uffd5\006\uffd5\011\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\024\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\034\uffd5\052\uffd5\061\uffd5\062\uffd5\064" +
    "\uffd5\065\uffd5\100\uffd5\105\uffd5\107\uffd5\112\uffd5\113\uffd5" +
    "\114\uffd5\115\uffd5\116\uffd5\117\uffd5\122\uffd5\140\uffd5\143" +
    "\uffd5\163\uffd5\164\uffd5\170\uffd5\001\002\000\004\146\074" +
    "\001\002\000\010\030\060\140\076\163\031\001\002\000" +
    "\016\154\102\155\101\156\104\157\077\160\103\162\100" +
    "\001\002\000\144\003\uff83\005\uff83\006\uff83\011\uff83\015" +
    "\uff83\016\uff83\017\uff83\021\uff83\022\uff83\024\uff83\026\uff83" +
    "\027\uff83\030\uff83\034\uff83\052\uff83\061\uff83\062\uff83\064" +
    "\uff83\065\uff83\100\uff83\105\uff83\107\uff83\112\uff83\113\uff83" +
    "\114\uff83\115\uff83\116\uff83\117\uff83\122\uff83\140\uff83\141" +
    "\uff83\142\uff83\143\uff83\144\uff83\145\uff83\147\uff83\150\uff83" +
    "\151\uff83\153\uff83\154\uff83\155\uff83\156\uff83\157\uff83\160" +
    "\uff83\161\uff83\162\uff83\163\uff83\164\uff83\170\uff83\001\002" +
    "\000\010\030\060\140\076\163\031\001\002\000\106\003" +
    "\uff8c\005\uff8c\006\uff8c\011\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\021\uff8c\022\uff8c\024\uff8c\026\uff8c\027\uff8c\030\uff8c\034" +
    "\uff8c\052\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c\100\uff8c" +
    "\105\uff8c\107\uff8c\112\uff8c\113\uff8c\114\uff8c\115\uff8c\116" +
    "\uff8c\117\uff8c\122\uff8c\140\uff8c\143\uff8c\163\uff8c\164\uff8c" +
    "\170\uff8c\001\002\000\010\030\060\140\076\163\031\001" +
    "\002\000\010\030\060\140\076\163\031\001\002\000\010" +
    "\030\060\140\076\163\031\001\002\000\010\030\060\140" +
    "\076\163\031\001\002\000\144\003\uff86\005\uff86\006\uff86" +
    "\011\uff86\015\uff86\016\uff86\017\uff86\021\uff86\022\uff86\024" +
    "\uff86\026\uff86\027\uff86\030\uff86\034\uff86\052\uff86\061\uff86" +
    "\062\uff86\064\uff86\065\uff86\100\uff86\105\uff86\107\uff86\112" +
    "\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117\uff86\122\uff86" +
    "\140\uff86\141\uff86\142\uff86\143\uff86\144\uff86\145\uff86\147" +
    "\uff86\150\uff86\151\uff86\153\uff86\154\uff86\155\uff86\156\uff86" +
    "\157\uff86\160\103\161\uff86\162\uff86\163\uff86\164\uff86\170" +
    "\uff86\001\002\000\144\003\uff84\005\uff84\006\uff84\011\uff84" +
    "\015\uff84\016\uff84\017\uff84\021\uff84\022\uff84\024\uff84\026" +
    "\uff84\027\uff84\030\uff84\034\uff84\052\uff84\061\uff84\062\uff84" +
    "\064\uff84\065\uff84\100\uff84\105\uff84\107\uff84\112\uff84\113" +
    "\uff84\114\uff84\115\uff84\116\uff84\117\uff84\122\uff84\140\uff84" +
    "\141\uff84\142\uff84\143\uff84\144\uff84\145\uff84\147\uff84\150" +
    "\uff84\151\uff84\153\uff84\154\uff84\155\uff84\156\uff84\157\uff84" +
    "\160\103\161\uff84\162\uff84\163\uff84\164\uff84\170\uff84\001" +
    "\002\000\144\003\uff88\005\uff88\006\uff88\011\uff88\015\uff88" +
    "\016\uff88\017\uff88\021\uff88\022\uff88\024\uff88\026\uff88\027" +
    "\uff88\030\uff88\034\uff88\052\uff88\061\uff88\062\uff88\064\uff88" +
    "\065\uff88\100\uff88\105\uff88\107\uff88\112\uff88\113\uff88\114" +
    "\uff88\115\uff88\116\uff88\117\uff88\122\uff88\140\uff88\141\uff88" +
    "\142\uff88\143\uff88\144\uff88\145\uff88\147\uff88\150\uff88\151" +
    "\uff88\153\uff88\154\uff88\155\uff88\156\104\157\077\160\103" +
    "\161\uff88\162\uff88\163\uff88\164\uff88\170\uff88\001\002\000" +
    "\144\003\uff87\005\uff87\006\uff87\011\uff87\015\uff87\016\uff87" +
    "\017\uff87\021\uff87\022\uff87\024\uff87\026\uff87\027\uff87\030" +
    "\uff87\034\uff87\052\uff87\061\uff87\062\uff87\064\uff87\065\uff87" +
    "\100\uff87\105\uff87\107\uff87\112\uff87\113\uff87\114\uff87\115" +
    "\uff87\116\uff87\117\uff87\122\uff87\140\uff87\141\uff87\142\uff87" +
    "\143\uff87\144\uff87\145\uff87\147\uff87\150\uff87\151\uff87\153" +
    "\uff87\154\uff87\155\uff87\156\104\157\077\160\103\161\uff87" +
    "\162\uff87\163\uff87\164\uff87\170\uff87\001\002\000\144\003" +
    "\uff85\005\uff85\006\uff85\011\uff85\015\uff85\016\uff85\017\uff85" +
    "\021\uff85\022\uff85\024\uff85\026\uff85\027\uff85\030\uff85\034" +
    "\uff85\052\uff85\061\uff85\062\uff85\064\uff85\065\uff85\100\uff85" +
    "\105\uff85\107\uff85\112\uff85\113\uff85\114\uff85\115\uff85\116" +
    "\uff85\117\uff85\122\uff85\140\uff85\141\uff85\142\uff85\143\uff85" +
    "\144\uff85\145\uff85\147\uff85\150\uff85\151\uff85\153\uff85\154" +
    "\uff85\155\uff85\156\uff85\157\uff85\160\103\161\uff85\162\uff85" +
    "\163\uff85\164\uff85\170\uff85\001\002\000\012\030\060\140" +
    "\076\143\035\163\031\001\002\000\010\141\115\142\114" +
    "\164\116\001\002\000\012\030\060\140\076\143\035\163" +
    "\031\001\002\000\012\030\060\140\076\143\035\163\031" +
    "\001\002\000\100\003\036\005\040\011\046\015\055\016" +
    "\056\017\012\021\053\024\054\026\007\027\057\030\060" +
    "\034\042\052\050\061\014\062\016\064\021\065\022\100" +
    "\024\105\033\107\061\112\025\113\010\114\015\115\006" +
    "\116\034\117\062\122\041\140\052\143\035\163\031\167" +
    "\117\001\002\000\076\003\036\005\040\011\046\015\055" +
    "\016\056\017\012\021\053\024\054\026\007\027\057\030" +
    "\060\034\042\052\050\061\014\062\016\064\021\065\022" +
    "\100\024\105\033\107\061\112\025\113\010\114\015\115" +
    "\006\116\034\117\062\122\041\140\052\143\035\163\031" +
    "\001\002\000\004\170\121\001\002\000\106\003\uff96\005" +
    "\uff96\006\uff96\011\uff96\015\uff96\016\uff96\017\uff96\021\uff96" +
    "\022\uff96\024\uff96\026\uff96\027\uff96\030\uff96\034\uff96\052" +
    "\uff96\061\uff96\062\uff96\064\uff96\065\uff96\100\uff96\105\uff96" +
    "\107\uff96\112\uff96\113\uff96\114\uff96\115\uff96\116\uff96\117" +
    "\uff96\122\uff96\140\uff96\143\uff96\163\uff96\164\uff96\170\uff96" +
    "\001\002\000\004\170\123\001\002\000\106\003\uff97\005" +
    "\uff97\006\uff97\011\uff97\015\uff97\016\uff97\017\uff97\021\uff97" +
    "\022\uff97\024\uff97\026\uff97\027\uff97\030\uff97\034\uff97\052" +
    "\uff97\061\uff97\062\uff97\064\uff97\065\uff97\100\uff97\105\uff97" +
    "\107\uff97\112\uff97\113\uff97\114\uff97\115\uff97\116\uff97\117" +
    "\uff97\122\uff97\140\uff97\143\uff97\163\uff97\164\uff97\170\uff97" +
    "\001\002\000\112\003\uff95\005\uff95\006\uff95\011\uff95\015" +
    "\uff95\016\uff95\017\uff95\021\uff95\022\uff95\024\uff95\026\uff95" +
    "\027\uff95\030\uff95\034\uff95\052\uff95\061\uff95\062\uff95\064" +
    "\uff95\065\uff95\100\uff95\105\uff95\107\uff95\112\uff95\113\uff95" +
    "\114\uff95\115\uff95\116\uff95\117\uff95\122\uff95\140\uff95\141" +
    "\uff95\142\114\143\uff95\163\uff95\164\uff95\170\uff95\001\002" +
    "\000\112\003\uff94\005\uff94\006\uff94\011\uff94\015\uff94\016" +
    "\uff94\017\uff94\021\uff94\022\uff94\024\uff94\026\uff94\027\uff94" +
    "\030\uff94\034\uff94\052\uff94\061\uff94\062\uff94\064\uff94\065" +
    "\uff94\100\uff94\105\uff94\107\uff94\112\uff94\113\uff94\114\uff94" +
    "\115\uff94\116\uff94\117\uff94\122\uff94\140\uff94\141\uff94\142" +
    "\uff94\143\uff94\163\uff94\164\uff94\170\uff94\001\002\000\012" +
    "\030\060\140\076\143\035\163\031\001\002\000\010\141" +
    "\115\142\114\164\130\001\002\000\100\003\036\005\040" +
    "\011\046\015\055\016\056\017\012\021\053\024\054\026" +
    "\007\027\057\030\060\034\042\052\050\061\014\062\016" +
    "\064\021\065\022\100\024\105\033\107\061\112\025\113" +
    "\010\114\015\115\006\116\034\117\062\122\041\140\052" +
    "\143\035\163\031\167\131\001\002\000\076\003\036\005" +
    "\040\011\046\015\055\016\056\017\012\021\053\024\054" +
    "\026\007\027\057\030\060\034\042\052\050\061\014\062" +
    "\016\064\021\065\022\100\024\105\033\107\061\112\025" +
    "\113\010\114\015\115\006\116\034\117\062\122\041\140" +
    "\052\143\035\163\031\001\002\000\004\170\133\001\002" +
    "\000\004\022\134\001\002\000\004\167\136\001\002\000" +
    "\106\003\uff9c\005\uff9c\006\uff9c\011\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\021\uff9c\022\uff9c\024\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\034\uff9c\052\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c" +
    "\100\uff9c\105\uff9c\107\uff9c\112\uff9c\113\uff9c\114\uff9c\115" +
    "\uff9c\116\uff9c\117\uff9c\122\uff9c\140\uff9c\143\uff9c\163\uff9c" +
    "\164\uff9c\170\uff9c\001\002\000\076\003\036\005\040\011" +
    "\046\015\055\016\056\017\012\021\053\024\054\026\007" +
    "\027\057\030\060\034\042\052\050\061\014\062\016\064" +
    "\021\065\022\100\024\105\033\107\061\112\025\113\010" +
    "\114\015\115\006\116\034\117\062\122\041\140\052\143" +
    "\035\163\031\001\002\000\004\170\140\001\002\000\106" +
    "\003\uff9a\005\uff9a\006\uff9a\011\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\021\uff9a\022\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\034\uff9a\052\uff9a\061\uff9a\062\uff9a\064\uff9a\065\uff9a\100" +
    "\uff9a\105\uff9a\107\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a" +
    "\116\uff9a\117\uff9a\122\uff9a\140\uff9a\143\uff9a\163\uff9a\164" +
    "\uff9a\170\uff9a\001\002\000\006\022\134\170\142\001\002" +
    "\000\004\022\134\001\002\000\106\003\uff9b\005\uff9b\006" +
    "\uff9b\011\uff9b\015\uff9b\016\uff9b\017\uff9b\021\uff9b\022\uff9b" +
    "\024\uff9b\026\uff9b\027\uff9b\030\uff9b\034\uff9b\052\uff9b\061" +
    "\uff9b\062\uff9b\064\uff9b\065\uff9b\100\uff9b\105\uff9b\107\uff9b" +
    "\112\uff9b\113\uff9b\114\uff9b\115\uff9b\116\uff9b\117\uff9b\122" +
    "\uff9b\140\uff9b\143\uff9b\163\uff9b\164\uff9b\170\uff9b\001\002" +
    "\000\106\003\uff9d\005\uff9d\006\uff9d\011\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\021\uff9d\022\uff9d\024\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\034\uff9d\052\uff9d\061\uff9d\062\uff9d\064\uff9d\065" +
    "\uff9d\100\uff9d\105\uff9d\107\uff9d\112\uff9d\113\uff9d\114\uff9d" +
    "\115\uff9d\116\uff9d\117\uff9d\122\uff9d\140\uff9d\143\uff9d\163" +
    "\uff9d\164\uff9d\170\uff9d\001\002\000\010\030\060\140\076" +
    "\163\031\001\002\000\016\154\102\155\101\156\104\157" +
    "\077\160\103\162\147\001\002\000\106\003\uff8f\005\uff8f" +
    "\006\uff8f\011\uff8f\015\uff8f\016\uff8f\017\uff8f\021\uff8f\022" +
    "\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\034\uff8f\052\uff8f" +
    "\061\uff8f\062\uff8f\064\uff8f\065\uff8f\100\uff8f\105\uff8f\107" +
    "\uff8f\112\uff8f\113\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f" +
    "\122\uff8f\140\uff8f\143\uff8f\163\uff8f\164\uff8f\170\uff8f\001" +
    "\002\000\006\030\151\164\153\001\002\000\010\030\157" +
    "\162\160\164\161\001\002\000\004\164\155\001\002\000" +
    "\004\162\154\001\002\000\106\003\uffc3\005\uffc3\006\uffc3" +
    "\011\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\024" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\034\uffc3\052\uffc3\061\uffc3" +
    "\062\uffc3\064\uffc3\065\uffc3\100\uffc3\105\uffc3\107\uffc3\112" +
    "\uffc3\113\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3\122\uffc3" +
    "\140\uffc3\143\uffc3\163\uffc3\164\uffc3\170\uffc3\001\002\000" +
    "\110\003\uffca\005\uffca\006\uffca\011\uffca\015\uffca\016\uffca" +
    "\017\uffca\021\uffca\022\uffca\024\uffca\026\uffca\027\uffca\030" +
    "\uffca\034\uffca\052\uffca\061\uffca\062\uffca\064\uffca\065\uffca" +
    "\100\uffca\105\uffca\107\uffca\112\uffca\113\uffca\114\uffca\115" +
    "\uffca\116\uffca\117\uffca\122\uffca\140\uffca\143\uffca\162\156" +
    "\163\uffca\164\uffca\170\uffca\001\002\000\106\003\uffcb\005" +
    "\uffcb\006\uffcb\011\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\022\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\034\uffcb\052" +
    "\uffcb\061\uffcb\062\uffcb\064\uffcb\065\uffcb\100\uffcb\105\uffcb" +
    "\107\uffcb\112\uffcb\113\uffcb\114\uffcb\115\uffcb\116\uffcb\117" +
    "\uffcb\122\uffcb\140\uffcb\143\uffcb\163\uffcb\164\uffcb\170\uffcb" +
    "\001\002\000\004\162\202\001\002\000\004\030\163\001" +
    "\002\000\004\162\162\001\002\000\106\003\uffc7\005\uffc7" +
    "\006\uffc7\011\uffc7\015\uffc7\016\uffc7\017\uffc7\021\uffc7\022" +
    "\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7\034\uffc7\052\uffc7" +
    "\061\uffc7\062\uffc7\064\uffc7\065\uffc7\100\uffc7\105\uffc7\107" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7" +
    "\122\uffc7\140\uffc7\143\uffc7\163\uffc7\164\uffc7\170\uffc7\001" +
    "\002\000\010\030\164\162\165\164\166\001\002\000\004" +
    "\164\200\001\002\000\004\030\170\001\002\000\004\162" +
    "\167\001\002\000\106\003\uffc8\005\uffc8\006\uffc8\011\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\024\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\034\uffc8\052\uffc8\061\uffc8\062\uffc8" +
    "\064\uffc8\065\uffc8\100\uffc8\105\uffc8\107\uffc8\112\uffc8\113" +
    "\uffc8\114\uffc8\115\uffc8\116\uffc8\117\uffc8\122\uffc8\140\uffc8" +
    "\143\uffc8\163\uffc8\164\uffc8\170\uffc8\001\002\000\010\030" +
    "\171\162\172\164\173\001\002\000\004\164\176\001\002" +
    "\000\004\030\175\001\002\000\004\162\174\001\002\000" +
    "\106\003\uffc9\005\uffc9\006\uffc9\011\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\024\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\034\uffc9\052\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9" +
    "\100\uffc9\105\uffc9\107\uffc9\112\uffc9\113\uffc9\114\uffc9\115" +
    "\uffc9\116\uffc9\117\uffc9\122\uffc9\140\uffc9\143\uffc9\163\uffc9" +
    "\164\uffc9\170\uffc9\001\002\000\004\164\uffbe\001\002\000" +
    "\004\162\177\001\002\000\106\003\uffc4\005\uffc4\006\uffc4" +
    "\011\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4\024" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\034\uffc4\052\uffc4\061\uffc4" +
    "\062\uffc4\064\uffc4\065\uffc4\100\uffc4\105\uffc4\107\uffc4\112" +
    "\uffc4\113\uffc4\114\uffc4\115\uffc4\116\uffc4\117\uffc4\122\uffc4" +
    "\140\uffc4\143\uffc4\163\uffc4\164\uffc4\170\uffc4\001\002\000" +
    "\004\162\201\001\002\000\106\003\uffc5\005\uffc5\006\uffc5" +
    "\011\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\024" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\034\uffc5\052\uffc5\061\uffc5" +
    "\062\uffc5\064\uffc5\065\uffc5\100\uffc5\105\uffc5\107\uffc5\112" +
    "\uffc5\113\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5\122\uffc5" +
    "\140\uffc5\143\uffc5\163\uffc5\164\uffc5\170\uffc5\001\002\000" +
    "\004\030\203\001\002\000\004\164\204\001\002\000\004" +
    "\162\205\001\002\000\106\003\uffc6\005\uffc6\006\uffc6\011" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\024\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\034\uffc6\052\uffc6\061\uffc6\062" +
    "\uffc6\064\uffc6\065\uffc6\100\uffc6\105\uffc6\107\uffc6\112\uffc6" +
    "\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6\122\uffc6\140" +
    "\uffc6\143\uffc6\163\uffc6\164\uffc6\170\uffc6\001\002\000\004" +
    "\164\207\001\002\000\004\167\210\001\002\000\076\003" +
    "\036\005\040\011\046\015\055\016\056\017\012\021\053" +
    "\024\054\026\007\027\057\030\060\034\042\052\050\061" +
    "\014\062\016\064\021\065\022\100\024\105\033\107\061" +
    "\112\025\113\010\114\015\115\006\116\034\117\062\122" +
    "\041\140\052\143\035\163\031\001\002\000\004\170\212" +
    "\001\002\000\106\003\uff89\005\uff89\006\uff89\011\uff89\015" +
    "\uff89\016\uff89\017\uff89\021\uff89\022\uff89\024\uff89\026\uff89" +
    "\027\uff89\030\uff89\034\uff89\052\uff89\061\uff89\062\uff89\064" +
    "\uff89\065\uff89\100\uff89\105\uff89\107\uff89\112\uff89\113\uff89" +
    "\114\uff89\115\uff89\116\uff89\117\uff89\122\uff89\140\uff89\143" +
    "\uff89\163\uff89\164\uff89\170\uff89\001\002\000\076\003\036" +
    "\005\040\011\046\015\055\016\056\017\012\021\053\024" +
    "\054\026\007\027\057\030\060\034\042\052\050\061\014" +
    "\062\016\064\021\065\022\100\024\105\033\107\061\112" +
    "\025\113\010\114\015\115\006\116\034\117\062\122\041" +
    "\140\052\143\035\163\031\001\002\000\004\164\215\001" +
    "\002\000\004\162\216\001\002\000\106\003\uffd7\005\uffd7" +
    "\006\uffd7\011\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\034\uffd7\052\uffd7" +
    "\061\uffd7\062\uffd7\064\uffd7\065\uffd7\100\uffd7\105\uffd7\107" +
    "\uffd7\112\uffd7\113\uffd7\114\uffd7\115\uffd7\116\uffd7\117\uffd7" +
    "\122\uffd7\140\uffd7\143\uffd7\163\uffd7\164\uffd7\170\uffd7\001" +
    "\002\000\004\163\220\001\002\000\010\016\221\017\223" +
    "\164\224\001\002\000\004\140\242\001\002\000\004\164" +
    "\236\001\002\000\004\140\230\001\002\000\004\167\225" +
    "\001\002\000\076\003\036\005\040\011\046\015\055\016" +
    "\056\017\012\021\053\024\054\026\007\027\057\030\060" +
    "\034\042\052\050\061\014\062\016\064\021\065\022\100" +
    "\024\105\033\107\061\112\025\113\010\114\015\115\006" +
    "\116\034\117\062\122\041\140\052\143\035\163\031\001" +
    "\002\000\004\170\227\001\002\000\106\003\uffef\005\uffef" +
    "\006\uffef\011\uffef\015\uffef\016\uffef\017\uffef\021\uffef\022" +
    "\uffef\024\uffef\026\uffef\027\uffef\030\uffef\034\uffef\052\uffef" +
    "\061\uffef\062\uffef\064\uffef\065\uffef\100\uffef\105\uffef\107" +
    "\uffef\112\uffef\113\uffef\114\uffef\115\uffef\116\uffef\117\uffef" +
    "\122\uffef\140\uffef\143\uffef\163\uffef\164\uffef\170\uffef\001" +
    "\002\000\010\016\221\017\223\146\232\001\002\000\004" +
    "\164\uffea\001\002\000\010\030\060\140\076\163\031\001" +
    "\002\000\016\154\102\155\101\156\104\157\077\160\103" +
    "\161\234\001\002\000\006\016\221\017\223\001\002\000" +
    "\004\164\uffeb\001\002\000\004\167\237\001\002\000\076" +
    "\003\036\005\040\011\046\015\055\016\056\017\012\021" +
    "\053\024\054\026\007\027\057\030\060\034\042\052\050" +
    "\061\014\062\016\064\021\065\022\100\024\105\033\107" +
    "\061\112\025\113\010\114\015\115\006\116\034\117\062" +
    "\122\041\140\052\143\035\163\031\001\002\000\004\170" +
    "\241\001\002\000\106\003\uffee\005\uffee\006\uffee\011\uffee" +
    "\015\uffee\016\uffee\017\uffee\021\uffee\022\uffee\024\uffee\026" +
    "\uffee\027\uffee\030\uffee\034\uffee\052\uffee\061\uffee\062\uffee" +
    "\064\uffee\065\uffee\100\uffee\105\uffee\107\uffee\112\uffee\113" +
    "\uffee\114\uffee\115\uffee\116\uffee\117\uffee\122\uffee\140\uffee" +
    "\143\uffee\163\uffee\164\uffee\170\uffee\001\002\000\010\016" +
    "\221\017\223\146\244\001\002\000\004\164\uffec\001\002" +
    "\000\010\030\060\140\076\163\031\001\002\000\016\154" +
    "\102\155\101\156\104\157\077\160\103\161\246\001\002" +
    "\000\006\016\221\017\223\001\002\000\004\164\uffed\001" +
    "\002\000\106\003\ufff1\005\ufff1\006\ufff1\011\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\021\ufff1\022\ufff1\024\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\034\ufff1\052\ufff1\061\ufff1\062\ufff1\064\ufff1" +
    "\065\ufff1\100\ufff1\105\ufff1\107\ufff1\112\ufff1\113\ufff1\114" +
    "\ufff1\115\ufff1\116\ufff1\117\ufff1\122\ufff1\140\ufff1\143\ufff1" +
    "\163\ufff1\164\ufff1\170\ufff1\001\002\000\106\003\ufff2\005" +
    "\ufff2\006\ufff2\011\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2" +
    "\022\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\034\ufff2\052" +
    "\ufff2\061\ufff2\062\ufff2\064\ufff2\065\ufff2\100\ufff2\105\ufff2" +
    "\107\ufff2\112\ufff2\113\ufff2\114\ufff2\115\ufff2\116\ufff2\117" +
    "\ufff2\122\ufff2\140\ufff2\143\ufff2\163\ufff2\164\ufff2\170\ufff2" +
    "\001\002\000\112\003\uff93\005\uff93\006\uff93\011\uff93\015" +
    "\uff93\016\uff93\017\uff93\021\uff93\022\uff93\024\uff93\026\uff93" +
    "\027\uff93\030\uff93\034\uff93\052\uff93\061\uff93\062\uff93\064" +
    "\uff93\065\uff93\100\uff93\105\uff93\107\uff93\112\uff93\113\uff93" +
    "\114\uff93\115\uff93\116\uff93\117\uff93\122\uff93\140\uff93\141" +
    "\uff93\142\uff93\143\uff93\163\uff93\164\uff93\170\uff93\001\002" +
    "\000\076\003\036\005\040\011\046\015\055\016\056\017" +
    "\012\021\053\024\054\026\007\027\057\030\060\034\042" +
    "\052\050\061\014\062\016\064\021\065\022\100\024\105" +
    "\033\107\061\112\025\113\010\114\015\115\006\116\034" +
    "\117\062\122\041\140\052\143\035\163\031\001\002\000" +
    "\004\164\255\001\002\000\110\003\uffc1\005\uffc1\006\uffc1" +
    "\011\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\034\uffc1\052\uffc1\061\uffc1" +
    "\062\uffc1\064\uffc1\065\uffc1\100\uffc1\105\uffc1\107\uffc1\112" +
    "\uffc1\113\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\122\uffc1" +
    "\140\uffc1\143\uffc1\162\256\163\uffc1\164\uffc1\170\uffc1\001" +
    "\002\000\106\003\uffc2\005\uffc2\006\uffc2\011\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\021\uffc2\022\uffc2\024\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\034\uffc2\052\uffc2\061\uffc2\062\uffc2\064\uffc2" +
    "\065\uffc2\100\uffc2\105\uffc2\107\uffc2\112\uffc2\113\uffc2\114" +
    "\uffc2\115\uffc2\116\uffc2\117\uffc2\122\uffc2\140\uffc2\143\uffc2" +
    "\163\uffc2\164\uffc2\170\uffc2\001\002\000\076\003\036\005" +
    "\040\011\046\015\055\016\056\017\012\021\053\024\054" +
    "\026\007\027\057\030\060\034\042\052\050\061\014\062" +
    "\016\064\021\065\022\100\024\105\033\107\061\112\025" +
    "\113\010\114\015\115\006\116\034\117\062\122\041\140" +
    "\052\143\035\163\031\001\002\000\004\164\261\001\002" +
    "\000\004\162\262\001\002\000\106\003\uffd4\005\uffd4\006" +
    "\uffd4\011\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\024\uffd4\026\uffd4\027\uffd4\030\uffd4\034\uffd4\052\uffd4\061" +
    "\uffd4\062\uffd4\064\uffd4\065\uffd4\100\uffd4\105\uffd4\107\uffd4" +
    "\112\uffd4\113\uffd4\114\uffd4\115\uffd4\116\uffd4\117\uffd4\122" +
    "\uffd4\140\uffd4\143\uffd4\163\uffd4\164\uffd4\170\uffd4\001\002" +
    "\000\010\141\115\142\114\164\264\001\002\000\144\003" +
    "\uff81\005\uff81\006\uff81\011\uff81\015\uff81\016\uff81\017\uff81" +
    "\021\uff81\022\uff81\024\uff81\026\uff81\027\uff81\030\uff81\034" +
    "\uff81\052\uff81\061\uff81\062\uff81\064\uff81\065\uff81\100\uff81" +
    "\105\uff81\107\uff81\112\uff81\113\uff81\114\uff81\115\uff81\116" +
    "\uff81\117\uff81\122\uff81\140\uff81\141\uff81\142\uff81\143\uff81" +
    "\144\uff81\145\uff81\147\uff81\150\uff81\151\uff81\153\uff81\154" +
    "\uff81\155\uff81\156\uff81\157\uff81\160\uff81\161\uff81\162\uff81" +
    "\163\uff81\164\uff81\170\uff81\001\002\000\010\030\060\140" +
    "\076\163\031\001\002\000\010\030\uff80\140\uff80\163\uff80" +
    "\001\002\000\010\030\uff7d\140\uff7d\163\uff7d\001\002\000" +
    "\010\030\uff7c\140\uff7c\163\uff7c\001\002\000\010\030\uff7f" +
    "\140\uff7f\163\uff7f\001\002\000\010\030\uff7e\140\uff7e\163" +
    "\uff7e\001\002\000\010\030\uff7b\140\uff7b\163\uff7b\001\002" +
    "\000\124\003\uff91\005\uff91\006\uff91\011\uff91\015\uff91\016" +
    "\uff91\017\uff91\021\uff91\022\uff91\024\uff91\026\uff91\027\uff91" +
    "\030\uff91\034\uff91\052\uff91\061\uff91\062\uff91\064\uff91\065" +
    "\uff91\100\uff91\105\uff91\107\uff91\112\uff91\113\uff91\114\uff91" +
    "\115\uff91\116\uff91\117\uff91\122\uff91\140\uff91\141\uff91\142" +
    "\uff91\143\uff91\154\102\155\101\156\104\157\077\160\103" +
    "\163\uff91\164\uff91\170\uff91\001\002\000\034\124\313\125" +
    "\304\126\276\127\311\130\300\131\310\132\301\133\307" +
    "\134\302\135\306\136\312\137\305\164\277\001\002\000" +
    "\004\164\uffbb\001\002\000\004\162\316\001\002\000\004" +
    "\164\uffb9\001\002\000\004\164\uffb7\001\002\000\004\164" +
    "\uffb5\001\002\000\004\164\314\001\002\000\004\164\uffbc" +
    "\001\002\000\004\164\uffb2\001\002\000\004\164\uffb4\001" +
    "\002\000\004\164\uffb6\001\002\000\004\164\uffb8\001\002" +
    "\000\004\164\uffba\001\002\000\004\164\uffb3\001\002\000" +
    "\004\164\uffbd\001\002\000\110\003\uffd1\005\uffd1\006\uffd1" +
    "\011\uffd1\015\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\024" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\034\uffd1\052\uffd1\061\uffd1" +
    "\062\uffd1\064\uffd1\065\uffd1\100\uffd1\105\uffd1\107\uffd1\112" +
    "\uffd1\113\uffd1\114\uffd1\115\uffd1\116\uffd1\117\uffd1\122\uffd1" +
    "\140\uffd1\143\uffd1\162\315\163\uffd1\164\uffd1\170\uffd1\001" +
    "\002\000\106\003\uffd3\005\uffd3\006\uffd3\011\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\021\uffd3\022\uffd3\024\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\034\uffd3\052\uffd3\061\uffd3\062\uffd3\064\uffd3" +
    "\065\uffd3\100\uffd3\105\uffd3\107\uffd3\112\uffd3\113\uffd3\114" +
    "\uffd3\115\uffd3\116\uffd3\117\uffd3\122\uffd3\140\uffd3\143\uffd3" +
    "\163\uffd3\164\uffd3\170\uffd3\001\002\000\106\003\uffd2\005" +
    "\uffd2\006\uffd2\011\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2" +
    "\022\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\034\uffd2\052" +
    "\uffd2\061\uffd2\062\uffd2\064\uffd2\065\uffd2\100\uffd2\105\uffd2" +
    "\107\uffd2\112\uffd2\113\uffd2\114\uffd2\115\uffd2\116\uffd2\117" +
    "\uffd2\122\uffd2\140\uffd2\143\uffd2\163\uffd2\164\uffd2\170\uffd2" +
    "\001\002\000\076\003\036\005\040\011\046\015\055\016" +
    "\056\017\012\021\053\024\054\026\007\027\057\030\060" +
    "\034\042\052\050\061\014\062\016\064\021\065\022\100" +
    "\024\105\033\107\061\112\025\113\010\114\015\115\006" +
    "\116\034\117\062\122\041\140\052\143\035\163\031\001" +
    "\002\000\004\164\321\001\002\000\004\162\322\001\002" +
    "\000\106\003\uffd6\005\uffd6\006\uffd6\011\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\022\uffd6\024\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\034\uffd6\052\uffd6\061\uffd6\062\uffd6\064\uffd6\065" +
    "\uffd6\100\uffd6\105\uffd6\107\uffd6\112\uffd6\113\uffd6\114\uffd6" +
    "\115\uffd6\116\uffd6\117\uffd6\122\uffd6\140\uffd6\143\uffd6\163" +
    "\uffd6\164\uffd6\170\uffd6\001\002\000\004\006\332\001\002" +
    "\000\004\010\325\001\002\000\004\162\326\001\002\000" +
    "\076\003\036\005\040\011\046\015\055\016\056\017\012" +
    "\021\053\024\054\026\007\027\057\030\060\034\042\052" +
    "\050\061\014\062\016\064\021\065\022\100\024\105\033" +
    "\107\061\112\025\113\010\114\015\115\006\116\034\117" +
    "\062\122\041\140\052\143\035\163\031\001\002\000\004" +
    "\006\330\001\002\000\004\162\331\001\002\000\004\002" +
    "\ufffd\001\002\000\006\002\uffff\162\333\001\002\000\004" +
    "\002\ufffe\001\002\000\030\066\335\067\336\070\341\071" +
    "\344\072\340\073\350\074\343\075\346\076\345\077\342" +
    "\164\337\001\002\000\004\164\uffa7\001\002\000\004\164" +
    "\uffa6\001\002\000\106\003\uffd8\005\uffd8\006\uffd8\011\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\034\uffd8\052\uffd8\061\uffd8\062\uffd8" +
    "\064\uffd8\065\uffd8\100\uffd8\105\uffd8\107\uffd8\112\uffd8\113" +
    "\uffd8\114\uffd8\115\uffd8\116\uffd8\117\uffd8\122\uffd8\140\uffd8" +
    "\143\uffd8\163\uffd8\164\uffd8\170\uffd8\001\002\000\004\164" +
    "\uffa3\001\002\000\004\164\uffa5\001\002\000\004\164\uff9e" +
    "\001\002\000\004\164\uffa1\001\002\000\004\164\uffa4\001" +
    "\002\000\004\164\uff9f\001\002\000\004\164\uffa0\001\002" +
    "\000\004\164\351\001\002\000\004\164\uffa2\001\002\000" +
    "\110\003\uffd9\005\uffd9\006\uffd9\011\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\021\uffd9\022\uffd9\024\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\034\uffd9\052\uffd9\061\uffd9\062\uffd9\064\uffd9\065\uffd9" +
    "\100\uffd9\105\uffd9\107\uffd9\112\uffd9\113\uffd9\114\uffd9\115" +
    "\uffd9\116\uffd9\117\uffd9\122\uffd9\140\uffd9\143\uffd9\162\352" +
    "\163\uffd9\164\uffd9\170\uffd9\001\002\000\106\003\uffda\005" +
    "\uffda\006\uffda\011\uffda\015\uffda\016\uffda\017\uffda\021\uffda" +
    "\022\uffda\024\uffda\026\uffda\027\uffda\030\uffda\034\uffda\052" +
    "\uffda\061\uffda\062\uffda\064\uffda\065\uffda\100\uffda\105\uffda" +
    "\107\uffda\112\uffda\113\uffda\114\uffda\115\uffda\116\uffda\117" +
    "\uffda\122\uffda\140\uffda\143\uffda\163\uffda\164\uffda\170\uffda" +
    "\001\002\000\030\066\354\067\355\070\360\071\364\072" +
    "\357\073\367\074\362\075\365\076\366\077\361\164\356" +
    "\001\002\000\004\164\uffb1\001\002\000\004\164\uffb0\001" +
    "\002\000\004\162\372\001\002\000\004\164\uffad\001\002" +
    "\000\004\164\uffaf\001\002\000\004\164\uffa8\001\002\000" +
    "\004\164\uffab\001\002\000\004\164\370\001\002\000\004" +
    "\164\uffae\001\002\000\004\164\uffaa\001\002\000\004\164" +
    "\uffa9\001\002\000\004\164\uffac\001\002\000\110\003\uffde" +
    "\005\uffde\006\uffde\011\uffde\015\uffde\016\uffde\017\uffde\021" +
    "\uffde\022\uffde\024\uffde\026\uffde\027\uffde\030\uffde\034\uffde" +
    "\052\uffde\061\uffde\062\uffde\064\uffde\065\uffde\100\uffde\105" +
    "\uffde\107\uffde\112\uffde\113\uffde\114\uffde\115\uffde\116\uffde" +
    "\117\uffde\122\uffde\140\uffde\143\uffde\162\371\163\uffde\164" +
    "\uffde\170\uffde\001\002\000\106\003\uffe0\005\uffe0\006\uffe0" +
    "\011\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0\024" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\034\uffe0\052\uffe0\061\uffe0" +
    "\062\uffe0\064\uffe0\065\uffe0\100\uffe0\105\uffe0\107\uffe0\112" +
    "\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0\117\uffe0\122\uffe0" +
    "\140\uffe0\143\uffe0\163\uffe0\164\uffe0\170\uffe0\001\002\000" +
    "\106\003\uffdf\005\uffdf\006\uffdf\011\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\022\uffdf\024\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\034\uffdf\052\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf" +
    "\100\uffdf\105\uffdf\107\uffdf\112\uffdf\113\uffdf\114\uffdf\115" +
    "\uffdf\116\uffdf\117\uffdf\122\uffdf\140\uffdf\143\uffdf\163\uffdf" +
    "\164\uffdf\170\uffdf\001\002\000\004\162\374\001\002\000" +
    "\004\002\000\001\002\000\100\003\036\005\040\011\046" +
    "\015\055\016\056\017\012\021\053\024\054\026\007\027" +
    "\057\030\060\034\042\052\050\061\014\062\016\064\021" +
    "\065\022\100\024\105\033\107\061\112\025\113\010\114" +
    "\015\115\006\116\034\117\062\122\041\140\052\143\035" +
    "\163\031\164\377\001\002\000\004\164\u0101\001\002\000" +
    "\004\162\u0100\001\002\000\106\003\uffdb\005\uffdb\006\uffdb" +
    "\011\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\024" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\034\uffdb\052\uffdb\061\uffdb" +
    "\062\uffdb\064\uffdb\065\uffdb\100\uffdb\105\uffdb\107\uffdb\112" +
    "\uffdb\113\uffdb\114\uffdb\115\uffdb\116\uffdb\117\uffdb\122\uffdb" +
    "\140\uffdb\143\uffdb\163\uffdb\164\uffdb\170\uffdb\001\002\000" +
    "\110\003\uffdc\005\uffdc\006\uffdc\011\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\021\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\034\uffdc\052\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc" +
    "\100\uffdc\105\uffdc\107\uffdc\112\uffdc\113\uffdc\114\uffdc\115" +
    "\uffdc\116\uffdc\117\uffdc\122\uffdc\140\uffdc\143\uffdc\162\u0102" +
    "\163\uffdc\164\uffdc\170\uffdc\001\002\000\106\003\uffdd\005" +
    "\uffdd\006\uffdd\011\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd" +
    "\022\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\034\uffdd\052" +
    "\uffdd\061\uffdd\062\uffdd\064\uffdd\065\uffdd\100\uffdd\105\uffdd" +
    "\107\uffdd\112\uffdd\113\uffdd\114\uffdd\115\uffdd\116\uffdd\117" +
    "\uffdd\122\uffdd\140\uffdd\143\uffdd\163\uffdd\164\uffdd\170\uffdd" +
    "\001\002\000\076\003\036\005\040\011\046\015\055\016" +
    "\056\017\012\021\053\024\054\026\007\027\057\030\060" +
    "\034\042\052\050\061\014\062\016\064\021\065\022\100" +
    "\024\105\033\107\061\112\025\113\010\114\015\115\006" +
    "\116\034\117\062\122\041\140\052\143\035\163\031\001" +
    "\002\000\004\164\u0105\001\002\000\004\162\u0106\001\002" +
    "\000\106\003\uffcf\005\uffcf\006\uffcf\011\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\021\uffcf\022\uffcf\024\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\034\uffcf\052\uffcf\061\uffcf\062\uffcf\064\uffcf\065" +
    "\uffcf\100\uffcf\105\uffcf\107\uffcf\112\uffcf\113\uffcf\114\uffcf" +
    "\115\uffcf\116\uffcf\117\uffcf\122\uffcf\140\uffcf\143\uffcf\163" +
    "\uffcf\164\uffcf\170\uffcf\001\002\000\006\030\u0108\164\u010a" +
    "\001\002\000\010\030\u010e\162\u010f\164\u0110\001\002\000" +
    "\004\164\u010c\001\002\000\004\162\u010b\001\002\000\106" +
    "\003\uffe1\005\uffe1\006\uffe1\011\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\021\uffe1\022\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\034\uffe1\052\uffe1\061\uffe1\062\uffe1\064\uffe1\065\uffe1\100" +
    "\uffe1\105\uffe1\107\uffe1\112\uffe1\113\uffe1\114\uffe1\115\uffe1" +
    "\116\uffe1\117\uffe1\122\uffe1\140\uffe1\143\uffe1\163\uffe1\164" +
    "\uffe1\170\uffe1\001\002\000\110\003\uffe8\005\uffe8\006\uffe8" +
    "\011\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\024" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\034\uffe8\052\uffe8\061\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\100\uffe8\105\uffe8\107\uffe8\112" +
    "\uffe8\113\uffe8\114\uffe8\115\uffe8\116\uffe8\117\uffe8\122\uffe8" +
    "\140\uffe8\143\uffe8\162\u010d\163\uffe8\164\uffe8\170\uffe8\001" +
    "\002\000\106\003\uffe9\005\uffe9\006\uffe9\011\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\021\uffe9\022\uffe9\024\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\034\uffe9\052\uffe9\061\uffe9\062\uffe9\064\uffe9" +
    "\065\uffe9\100\uffe9\105\uffe9\107\uffe9\112\uffe9\113\uffe9\114" +
    "\uffe9\115\uffe9\116\uffe9\117\uffe9\122\uffe9\140\uffe9\143\uffe9" +
    "\163\uffe9\164\uffe9\170\uffe9\001\002\000\006\030\u011c\162" +
    "\u011d\001\002\000\004\030\u0112\001\002\000\004\162\u0111" +
    "\001\002\000\106\003\uffe4\005\uffe4\006\uffe4\011\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\024\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\034\uffe4\052\uffe4\061\uffe4\062\uffe4\064" +
    "\uffe4\065\uffe4\100\uffe4\105\uffe4\107\uffe4\112\uffe4\113\uffe4" +
    "\114\uffe4\115\uffe4\116\uffe4\117\uffe4\122\uffe4\140\uffe4\143" +
    "\uffe4\163\uffe4\164\uffe4\170\uffe4\001\002\000\010\030\u0113" +
    "\162\u0114\164\u0115\001\002\000\004\164\u011a\001\002\000" +
    "\006\030\u0117\164\u0118\001\002\000\004\162\u0116\001\002" +
    "\000\106\003\uffe3\005\uffe3\006\uffe3\011\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\021\uffe3\022\uffe3\024\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\034\uffe3\052\uffe3\061\uffe3\062\uffe3\064\uffe3\065" +
    "\uffe3\100\uffe3\105\uffe3\107\uffe3\112\uffe3\113\uffe3\114\uffe3" +
    "\115\uffe3\116\uffe3\117\uffe3\122\uffe3\140\uffe3\143\uffe3\163" +
    "\uffe3\164\uffe3\170\uffe3\001\002\000\004\164\uffbf\001\002" +
    "\000\004\162\u0119\001\002\000\106\003\uffe2\005\uffe2\006" +
    "\uffe2\011\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2" +
    "\024\uffe2\026\uffe2\027\uffe2\030\uffe2\034\uffe2\052\uffe2\061" +
    "\uffe2\062\uffe2\064\uffe2\065\uffe2\100\uffe2\105\uffe2\107\uffe2" +
    "\112\uffe2\113\uffe2\114\uffe2\115\uffe2\116\uffe2\117\uffe2\122" +
    "\uffe2\140\uffe2\143\uffe2\163\uffe2\164\uffe2\170\uffe2\001\002" +
    "\000\004\162\u011b\001\002\000\106\003\uffe6\005\uffe6\006" +
    "\uffe6\011\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\026\uffe6\027\uffe6\030\uffe6\034\uffe6\052\uffe6\061" +
    "\uffe6\062\uffe6\064\uffe6\065\uffe6\100\uffe6\105\uffe6\107\uffe6" +
    "\112\uffe6\113\uffe6\114\uffe6\115\uffe6\116\uffe6\117\uffe6\122" +
    "\uffe6\140\uffe6\143\uffe6\163\uffe6\164\uffe6\170\uffe6\001\002" +
    "\000\004\164\u0121\001\002\000\004\030\u011e\001\002\000" +
    "\004\164\u011f\001\002\000\004\162\u0120\001\002\000\106" +
    "\003\uffe7\005\uffe7\006\uffe7\011\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\021\uffe7\022\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\034\uffe7\052\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7\100" +
    "\uffe7\105\uffe7\107\uffe7\112\uffe7\113\uffe7\114\uffe7\115\uffe7" +
    "\116\uffe7\117\uffe7\122\uffe7\140\uffe7\143\uffe7\163\uffe7\164" +
    "\uffe7\170\uffe7\001\002\000\004\162\u0122\001\002\000\106" +
    "\003\uffe5\005\uffe5\006\uffe5\011\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\034\uffe5\052\uffe5\061\uffe5\062\uffe5\064\uffe5\065\uffe5\100" +
    "\uffe5\105\uffe5\107\uffe5\112\uffe5\113\uffe5\114\uffe5\115\uffe5" +
    "\116\uffe5\117\uffe5\122\uffe5\140\uffe5\143\uffe5\163\uffe5\164" +
    "\uffe5\170\uffe5\001\002\000\012\006\ufffc\022\ufffc\164\ufffc" +
    "\170\ufffc\001\002\000\004\146\u0125\001\002\000\010\030" +
    "\060\140\076\163\031\001\002\000\016\154\102\155\101" +
    "\156\104\157\077\160\103\162\u0127\001\002\000\106\003" +
    "\uff8d\005\uff8d\006\uff8d\011\uff8d\015\uff8d\016\uff8d\017\uff8d" +
    "\021\uff8d\022\uff8d\024\uff8d\026\uff8d\027\uff8d\030\uff8d\034" +
    "\uff8d\052\uff8d\061\uff8d\062\uff8d\064\uff8d\065\uff8d\100\uff8d" +
    "\105\uff8d\107\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d\116" +
    "\uff8d\117\uff8d\122\uff8d\140\uff8d\143\uff8d\163\uff8d\164\uff8d" +
    "\170\uff8d\001\002\000\004\162\u0129\001\002\000\106\003" +
    "\uff8e\005\uff8e\006\uff8e\011\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\021\uff8e\022\uff8e\024\uff8e\026\uff8e\027\uff8e\030\uff8e\034" +
    "\uff8e\052\uff8e\061\uff8e\062\uff8e\064\uff8e\065\uff8e\100\uff8e" +
    "\105\uff8e\107\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\116" +
    "\uff8e\117\uff8e\122\uff8e\140\uff8e\143\uff8e\163\uff8e\164\uff8e" +
    "\170\uff8e\001\002\000\076\003\036\005\040\011\046\015" +
    "\055\016\056\017\012\021\053\024\054\026\007\027\057" +
    "\030\060\034\042\052\050\061\014\062\016\064\021\065" +
    "\022\100\024\105\033\107\061\112\025\113\010\114\015" +
    "\115\006\116\034\117\062\122\041\140\052\143\035\163" +
    "\031\001\002\000\004\164\u012c\001\002\000\004\162\u012d" +
    "\001\002\000\106\003\uffd0\005\uffd0\006\uffd0\011\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\024\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\034\uffd0\052\uffd0\061\uffd0\062\uffd0\064" +
    "\uffd0\065\uffd0\100\uffd0\105\uffd0\107\uffd0\112\uffd0\113\uffd0" +
    "\114\uffd0\115\uffd0\116\uffd0\117\uffd0\122\uffd0\140\uffd0\143" +
    "\uffd0\163\uffd0\164\uffd0\170\uffd0\001\002\000\006\162\u012f" +
    "\164\u0130\001\002\000\106\003\uffcc\005\uffcc\006\uffcc\011" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\024\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\034\uffcc\052\uffcc\061\uffcc\062" +
    "\uffcc\064\uffcc\065\uffcc\100\uffcc\105\uffcc\107\uffcc\112\uffcc" +
    "\113\uffcc\114\uffcc\115\uffcc\116\uffcc\117\uffcc\122\uffcc\140" +
    "\uffcc\143\uffcc\163\uffcc\164\uffcc\170\uffcc\001\002\000\110" +
    "\003\uffcd\005\uffcd\006\uffcd\011\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\021\uffcd\022\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\034\uffcd\052\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd\100" +
    "\uffcd\105\uffcd\107\uffcd\112\uffcd\113\uffcd\114\uffcd\115\uffcd" +
    "\116\uffcd\117\uffcd\122\uffcd\140\uffcd\143\uffcd\162\u0131\163" +
    "\uffcd\164\uffcd\170\uffcd\001\002\000\106\003\uffce\005\uffce" +
    "\006\uffce\011\uffce\015\uffce\016\uffce\017\uffce\021\uffce\022" +
    "\uffce\024\uffce\026\uffce\027\uffce\030\uffce\034\uffce\052\uffce" +
    "\061\uffce\062\uffce\064\uffce\065\uffce\100\uffce\105\uffce\107" +
    "\uffce\112\uffce\113\uffce\114\uffce\115\uffce\116\uffce\117\uffce" +
    "\122\uffce\140\uffce\143\uffce\163\uffce\164\uffce\170\uffce\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\002\003\001\001\000\002\001\001\000" +
    "\036\003\016\004\012\005\044\006\031\007\036\010\010" +
    "\011\043\013\027\020\026\022\050\023\046\024\042\025" +
    "\025\030\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u0122\004\012\005\044\006\031\007\036\010\010" +
    "\011\043\013\027\020\026\022\050\023\046\024\042\025" +
    "\025\030\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\322\004\012" +
    "\005\044\006\031\007\036\010\010\011\043\013\027\020" +
    "\026\022\050\023\046\024\042\025\025\030\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\264\001\001\000\010\013\027" +
    "\024\262\030\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\027\024\251\030\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\063\004" +
    "\012\005\044\006\031\007\036\010\010\011\043\013\027" +
    "\020\026\022\050\023\046\024\042\025\025\030\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\067\004\012\005\044\006\031\007\036\010" +
    "\010\011\043\013\027\020\026\022\050\023\046\024\042" +
    "\025\025\030\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\110\001\001\000\002\001\001\000\004\013\107\001\001" +
    "\000\004\013\106\001\001\000\004\013\105\001\001\000" +
    "\004\013\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\027\024\112\030\017\001\001\000\002\001\001" +
    "\000\010\013\027\024\124\030\017\001\001\000\010\013" +
    "\027\024\123\030\017\001\001\000\036\003\117\004\012" +
    "\005\044\006\031\007\036\010\010\011\043\013\027\020" +
    "\026\022\050\023\046\024\042\025\025\030\017\001\001" +
    "\000\036\003\121\004\012\005\044\006\031\007\036\010" +
    "\010\011\043\013\027\020\026\022\050\023\046\024\042" +
    "\025\025\030\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\027\024\126\030\017\001" +
    "\001\000\002\001\001\000\036\003\131\004\012\005\044" +
    "\006\031\007\036\010\010\011\043\013\027\020\026\022" +
    "\050\023\046\024\042\025\025\030\017\001\001\000\036" +
    "\003\140\004\012\005\044\006\031\007\036\010\010\011" +
    "\043\013\027\020\026\022\050\023\046\024\042\025\025" +
    "\030\017\001\001\000\002\001\001\000\004\021\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\136" +
    "\004\012\005\044\006\031\007\036\010\010\011\043\013" +
    "\027\020\026\022\050\023\046\024\042\025\025\030\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\142\001\001\000\004\021\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\210\004\012\005\044" +
    "\006\031\007\036\010\010\011\043\013\027\020\026\022" +
    "\050\023\046\024\042\025\025\030\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\213\004\012\005" +
    "\044\006\031\007\036\010\010\011\043\013\027\020\026" +
    "\022\050\023\046\024\042\025\025\030\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\225\004\012\005\044\006\031\007\036\010\010\011" +
    "\043\013\027\020\026\022\050\023\046\024\042\025\025" +
    "\030\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\230\001\001\000\002\001\001\000\004\013\232" +
    "\001\001\000\002\001\001\000\004\031\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\237\004\012" +
    "\005\044\006\031\007\036\010\010\011\043\013\027\020" +
    "\026\022\050\023\046\024\042\025\025\030\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\242\001" +
    "\001\000\002\001\001\000\004\013\244\001\001\000\002" +
    "\001\001\000\004\031\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\253\004\012\005\044\006\031\007\036\010\010\011" +
    "\043\013\027\020\026\022\050\023\046\024\042\025\025" +
    "\030\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\257\004\012\005\044\006\031" +
    "\007\036\010\010\011\043\013\027\020\026\022\050\023" +
    "\046\024\042\025\025\030\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\317\004\012" +
    "\005\044\006\031\007\036\010\010\011\043\013\027\020" +
    "\026\022\050\023\046\024\042\025\025\030\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\326\004\012\005\044\006\031\007\036\010\010\011" +
    "\043\013\027\020\026\022\050\023\046\024\042\025\025" +
    "\030\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\375\004\012\005\044\006" +
    "\031\007\036\010\010\011\043\013\027\020\026\022\050" +
    "\023\046\024\042\025\025\030\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\u0103\004\012\005\044\006" +
    "\031\007\036\010\010\011\043\013\027\020\026\022\050" +
    "\023\046\024\042\025\025\030\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u012a\004\012\005\044\006\031\007\036\010\010\011\043" +
    "\013\027\020\026\022\050\023\046\024\042\025\025\030" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
   
    private Symbol s;

    public void syntax_error(Symbol s){
       VenPrincipal.notificar_er(" ERROR SINTACTICO. En la línea: "+(s.right+1)+". Existe un problema con el Token ["+ s.value+" ] y la estructura de la sentencia");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //VenPrincipal.notificar_er(" ERROR NR SINTACTICO. En la línea: "+(s.left+1)+" columna "+(s.right+1)+"Existe un problema con "+ s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_REL ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_REL ::= Igualque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_REL ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP_REL ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP_REL ::= Menorque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP_REL ::= Mayorque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OP_REL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= Parentesis_a LOG Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= EXP Exponente EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= EXP Division EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= EXP Multiplicacion EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= EXP Resta EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXP Suma EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IMPLEOPRINCIPAL ::= Orden_principal Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPLEOPRINCIPAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPO ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO ::= Elemento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARA ::= Ent Identificador Igual EXP Pycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
               //VenPrincipal.llenarTabla(tright,id,t,"");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARA",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARA ::= NumDec Identificador Igual EXP Pycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
               //VenPrincipal.llenarTabla(tright,id,t,"");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARA",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARA ::= TIPO Identificador Pycoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
               //VenPrincipal.ids.add(tright,id,t,"");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARA",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNA ::= Identificador Igual EXP Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // REL ::= EXP 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REL",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // REL ::= EXP OP_REL EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REL",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LOG ::= REL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOG ::= Not LOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOG ::= LOG And LOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LOG ::= LOG Or LOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // WHILE ::= Mientras Parentesis_a LOG Parentesis_c SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int parenMileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parenMiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object parenMi = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            VenPrincipal.notificar_er(" ERROR SINTACTICO 4. En la línea: "+(parenMiright+1)+", se esperaba '{' después de la condición para iniciar el bloque de instrucciones");
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // WHILE ::= Mientras Parentesis_a LOG Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPER ::= Op_decremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPER ::= Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELSE ::= Sino Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF ::= Si Parentesis_a LOG Parentesis_c Llave_a SENTENCIAS ELSE 
            {
              Object RESULT =null;
		int parmo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parmo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object parmo2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            VenPrincipal.notificar_er(" ERROR SINTACTICO 4. En la línea: "+(parmo2right+1)+", se esperaba '}' para hacer el bloque de instrucciones");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF ::= Si Parentesis_a LOG Parentesis_c SENTENCIAS Llave_c ELSE 
            {
              Object RESULT =null;
		int parmo3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int parmo3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object parmo3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            VenPrincipal.notificar_er(" ERROR SINTACTICO 4. En la línea: "+(parmo3right+1)+", se esperaba '{' después de la condición para iniciar el bloque de instrucciones");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF ::= Si Parentesis_a LOG Parentesis_c Llave_a SENTENCIAS Llave_c ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMODOTERM ::= LG_Poligono 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMODOTERM ::= LG_Cuadrado_Lin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMODOTERM ::= LG_Cuadrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMODOTERM ::= LG_Triangulo_Abanico 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMODOTERM ::= LG_Triangulo_Lin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMODOTERM ::= LG_Triangulos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMODOTERM ::= LG_Linea_Ciclo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMODOTERM ::= LG_Linea_Lin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMODOTERM ::= LG_Lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMODOTERM ::= LG_Puntos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOTERM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMODOEMPE ::= LG_Poligono 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMODOEMPE ::= LG_Cuadrado_Lin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMODOEMPE ::= LG_Cuadrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMODOEMPE ::= LG_Triangulo_Abanico 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMODOEMPE ::= LG_Triangulo_Lin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMODOEMPE ::= LG_Triangulos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMODOEMPE ::= LG_Linea_Ciclo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMODOEMPE ::= LG_Linea_Lin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMODOEMPE ::= LG_Lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMODOEMPE ::= LG_Puntos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOEMPE",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMODOVIS ::= LG_Luminosa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMODOVIS ::= LG_Estereo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMODOVIS ::= LG_MuestreoMultiple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMODOVIS ::= LG_Plantilla 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMODOVIS ::= LG_Profundo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMODOVIS ::= LG_Alfa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMODOVIS ::= LG_Acumulacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMODOVIS ::= LG_Doble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMODOVIS ::= LG_Solo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMODOVIS ::= LG_Indice 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMODOVIS ::= LG_RGB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMODOVIS ::= LG_RGBA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMODOVIS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NUMEROSDOS ::= Numero Pycoma Numero Pycoma Numero Pycoma Numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROSDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NUMEROS ::= Numero Pycoma Numero Pycoma Numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RESERVADAS ::= LGRemodeladoFuncion Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RESERVADAS ::= LGMostrarFuncion Parentesis_a SENTENCIAS Parentesis_c 
            {
              Object RESULT =null;
		int parmoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parmoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object parmo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(parmoright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RESERVADAS ::= LGMostrarFuncion Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int piloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int piloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pilo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 3. En la línea: "+(piloright+1)+", se quiere de un parametro para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a Numero Pycoma Numero Pycoma Numero Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int nums3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nums3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object nums3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                 VenPrincipal.notificar_er(" ERROR SINTACTICO 5. En la línea: "+(nums3right+1)+", cada parametro debe estar seguido de un ';'");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a Numero Pycoma Numero Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int nums2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nums2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object nums2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                 VenPrincipal.notificar_er(" ERROR SINTACTICO 5. En la línea: "+(nums2right+1)+", cada parametro debe estar seguido de un ';'");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a Numero Numero Pycoma Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int nums1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nums1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object nums1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
                 VenPrincipal.notificar_er(" ERROR SINTACTICO 5. En la línea: "+(nums1right+1)+", cada parametro debe estar seguido de un ';'");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int pocasileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pocasiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pocasi = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                 VenPrincipal.notificar_er(" ERROR SINTACTICO 6. En la línea: "+(pocasiright+1)+", se requieren más parametros para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a Numero Pycoma Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int pocasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pocasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pocas = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                 VenPrincipal.notificar_er(" ERROR SINTACTICO 6. En la línea: "+(pocasright+1)+", se requieren más parametros para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a Numero Pycoma Numero Pycoma Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int pocaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pocaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object poca = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                 VenPrincipal.notificar_er(" ERROR SINTACTICO 6. En la línea: "+(pocaright+1)+", se requieren más parametros para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a NUMEROSDOS Parentesis_c 
            {
              Object RESULT =null;
		int parLileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parLiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object parLi = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(parLiright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RESERVADAS ::= LGlimpiarBufferColor Parentesis_a NUMEROSDOS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RESERVADAS ::= LGCrearVentana Parentesis_a Pycoma 
            {
              Object RESULT =null;
		int picoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int picoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pico = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(picoright+1)+", se esperaba un ')' después del '(' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RESERVADAS ::= LGCrearVentana Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int parveleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parveright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object parve = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(parveright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RESERVADAS ::= LGCrearVentana Parentesis_a Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RESERVADAS ::= LGTamañoVentanaInicio Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RESERVADAS ::= LGPosicionVentanaInicio Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RESERVADAS ::= LGModoVisualizacion Parentesis_a PARAMODOVIS Parentesis_c 
            {
              Object RESULT =null;
		int parvileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parviright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object parvi = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(parviright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RESERVADAS ::= LGModoVisualizacion Parentesis_a Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int pololeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int poloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object polo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 3. En la línea: "+(poloright+1)+", se quiere de un parametro para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RESERVADAS ::= LGModoVisualizacion Parentesis_a PARAMODOVIS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RESERVADAS ::= LGMatrizOrtografica Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RESERVADAS ::= LGMatrizIdentidad Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RESERVADAS ::= LGModoMatriz Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RESERVADAS ::= LGVentana Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RESERVADAS ::= LGTerminar Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int partesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int partesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object partes = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 3. En la línea: "+(partesright+1)+", se quiere de un parametro para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RESERVADAS ::= LGTerminar Parentesis_a PARAMODOTERM Parentesis_c 
            {
              Object RESULT =null;
		int parteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parteright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object parte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(parteright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RESERVADAS ::= LGTerminar Parentesis_a PARAMODOTERM Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RESERVADAS ::= LGVertice Parentesis_a Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int parVerleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int parVerright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object parVer = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(parVerright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RESERVADAS ::= LGVertice Parentesis_a SENTENCIAS Parentesis_c 
            {
              Object RESULT =null;
		int verleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int verright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ver = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(verright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RESERVADAS ::= LGVertice Parentesis_a SENTENCIAS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RESERVADAS ::= LGEmpezar Parentesis_a PARAMODOEMPE Parentesis_c 
            {
              Object RESULT =null;
		int paremleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int paremright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object parem = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(paremright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RESERVADAS ::= LGEmpezar Parentesis_a Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int picaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int picaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pica = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 3. En la línea: "+(picaright+1)+", se quiere de un parametro para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RESERVADAS ::= LGEmpezar Parentesis_a PARAMODOEMPE Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RESERVADAS ::= LGColor Parentesis_a Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int pocoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pocoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object poco = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 3. En la línea: "+(pocoright+1)+", se quiere de un parametro para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RESERVADAS ::= LGColor Parentesis_a Numero Pycoma Numero Pycoma Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int numTresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int numTresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object numTres = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 6. En la línea: "+(numTresright+1)+", se requieren más parametros para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RESERVADAS ::= LGColor Parentesis_a Numero Pycoma Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int numDosleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numDosright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object numDos = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 6. En la línea: "+(numDosright+1)+", se requieren más parametros para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RESERVADAS ::= LGColor Parentesis_a Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int numUnleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numUnright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object numUn = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 6. En la línea: "+(numUnright+1)+", se requieren más parametros para completar la sentencia");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RESERVADAS ::= LGColor Parentesis_a Numero Numero Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int num3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object num3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 5. En la línea: "+(num3right+1)+", cada parametro debe estar seguido de un ';'");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RESERVADAS ::= LGColor Parentesis_a Numero Pycoma Numero Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 5. En la línea: "+(num2right+1)+", cada parametro debe estar seguido de un ';'");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RESERVADAS ::= LGColor Parentesis_a Numero Numero Pycoma Numero Parentesis_c Pycoma 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 5. En la línea: "+(numright+1)+", cada parametro debe estar seguido de un ';'");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RESERVADAS ::= LGColor Parentesis_a NUMEROS Parentesis_c 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(parright+1)+", se esperaba un ';' después del ')' ");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RESERVADAS ::= LGColor Parentesis_a NUMEROS Parentesis_c Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= NumDec Identificador PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS ::= NumDec Identificador Igual EXP Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS ::= Ent Identificador PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= Ent Identificador Igual EXP Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPLEFUNCION ::= Programa Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPLEFUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPLEFUNCION ::= Programa Identificador Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPLEFUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S ::= RESERVADAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= error Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= IMPLEOPRINCIPAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= OPER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= LOG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= IMPLEFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= DECLARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= S SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Inicio Pycoma Montar LLDG Pycoma SENTENCIAS Fin Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Inicio Pycoma SENTENCIAS Fin Pycoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio Pycoma SENTENCIAS Fin 
            {
              Object RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(finright+1)+", se esperaba un ';' después de fin");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio SENTENCIAS Fin Pycoma 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                VenPrincipal.notificar_er(" ERROR SINTACTICO 1. En la línea: "+(iniright+1)+", se esperaba un ';' después de inicio");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

